{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Hooks\\\\Toolbar.js\";\nimport React from 'react';\nimport { RichUtils } from 'draft-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Toolbar = props => {\n  const inlineStyles = [{\n    type: 'BOLD',\n    label: 'Bold',\n    toolTip: 'Bold'\n  }, {\n    type: 'ITALIC',\n    label: 'Italic',\n    toolTip: 'Italic'\n  }, {\n    type: 'UNDERLINE',\n    label: 'Underline',\n    toolTip: 'Underline'\n  }, {\n    type: 'CODE',\n    label: 'Code',\n    toolTip: 'Code Block'\n  }];\n  const blockStyles = [{\n    type: 'unordered-list-item',\n    label: 'Unordered List',\n    toolTip: 'Unordered List'\n  }, {\n    type: 'ordered-list-item',\n    label: 'Ordered List',\n    toolTip: 'Ordered List'\n  }];\n  const {\n    editorState,\n    setEditorState\n  } = props;\n\n  const handleInlineStyle = (event, style) => {\n    event.preventDefault();\n    setEditorState(RichUtils.toggleInlineStyle(editorState, style));\n  };\n\n  const handleBlockStyle = (event, block) => {\n    event.preventDefault();\n    setEditorState(RichUtils.toggleBlockType(editorState, block));\n  };\n\n  const renderInlineStyleButton = (style, index) => {\n    const currentInlineStyle = editorState.getCurrentInlineStyle();\n    let className = 'toolbar-button';\n\n    if (currentInlineStyle.has(style.type)) {\n      className = 'toolbar-button-selected';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      title: style.toolTip,\n      onMouseDown: event => handleInlineStyle(event, style.type),\n      onClick: event => event.preventDefault(),\n      className: className,\n      children: style.label\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderBlockStyleButton = (block, index) => {\n    const currentBlockType = RichUtils.getCurrentBlockType(editorState);\n    let className = 'toolbar-button';\n\n    if (currentBlockType === block.type) {\n      className = 'toolbar-button-selected';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      title: block.toolTip,\n      onMouseDown: event => handleBlockStyle(event, block.type),\n      onClick: event => event.preventDefault(),\n      className: className,\n      children: block.label\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"editor-toolbar\",\n    children: [inlineStyles.map((style, index) => {\n      return renderInlineStyleButton(style, index);\n    }), blockStyles.map((block, index) => {\n      return renderBlockStyleButton(block, index);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Toolbar;\nexport default Toolbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Hooks/Toolbar.js"],"names":["React","RichUtils","Toolbar","props","inlineStyles","type","label","toolTip","blockStyles","editorState","setEditorState","handleInlineStyle","event","style","preventDefault","toggleInlineStyle","handleBlockStyle","block","toggleBlockType","renderInlineStyleButton","index","currentInlineStyle","getCurrentInlineStyle","className","has","renderBlockStyleButton","currentBlockType","getCurrentBlockType","map"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { RichUtils } from 'draft-js'\r\n\r\nconst Toolbar = (props) => {\r\n  const inlineStyles = [\r\n    { type: 'BOLD', label: 'Bold', toolTip: 'Bold' },\r\n    { type: 'ITALIC', label: 'Italic', toolTip: 'Italic' },\r\n    { type: 'UNDERLINE', label: 'Underline', toolTip: 'Underline' },\r\n    { type: 'CODE', label: 'Code', toolTip: 'Code Block' },\r\n  ]\r\n\r\n  const blockStyles = [\r\n    {\r\n      type: 'unordered-list-item',\r\n      label: 'Unordered List',\r\n      toolTip: 'Unordered List',\r\n    },\r\n    {\r\n      type: 'ordered-list-item',\r\n      label: 'Ordered List',\r\n      toolTip: 'Ordered List',\r\n    },\r\n  ]\r\n\r\n  const { editorState, setEditorState } = props\r\n\r\n  const handleInlineStyle = (event, style) => {\r\n    event.preventDefault()\r\n    setEditorState(RichUtils.toggleInlineStyle(editorState, style))\r\n  }\r\n\r\n  const handleBlockStyle = (event, block) => {\r\n    event.preventDefault()\r\n    setEditorState(RichUtils.toggleBlockType(editorState, block))\r\n  }\r\n\r\n  const renderInlineStyleButton = (style, index) => {\r\n    const currentInlineStyle = editorState.getCurrentInlineStyle()\r\n    let className = 'toolbar-button'\r\n    if (currentInlineStyle.has(style.type)) {\r\n      className = 'toolbar-button-selected'\r\n    }\r\n\r\n    return (\r\n      <button\r\n        key={index}\r\n        title={style.toolTip}\r\n        onMouseDown={(event) => handleInlineStyle(event, style.type)}\r\n        onClick={(event) => event.preventDefault()}\r\n        className={className}\r\n      >\r\n        {style.label}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const renderBlockStyleButton = (block, index) => {\r\n    const currentBlockType = RichUtils.getCurrentBlockType(editorState)\r\n    let className = 'toolbar-button'\r\n    if (currentBlockType === block.type) {\r\n      className = 'toolbar-button-selected'\r\n    }\r\n\r\n    return (\r\n      <button\r\n        key={index}\r\n        title={block.toolTip}\r\n        onMouseDown={(event) => handleBlockStyle(event, block.type)}\r\n        onClick={(event) => event.preventDefault()}\r\n        className={className}\r\n      >\r\n        {block.label}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div id='editor-toolbar'>\r\n      {inlineStyles.map((style, index) => {\r\n        return renderInlineStyleButton(style, index)\r\n      })}\r\n      {blockStyles.map((block, index) => {\r\n        return renderBlockStyleButton(block, index)\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Toolbar\r\n"]},"metadata":{},"sourceType":"module"}