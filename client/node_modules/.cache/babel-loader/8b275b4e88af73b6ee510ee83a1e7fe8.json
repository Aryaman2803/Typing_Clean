{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Components\\\\Dashboard\\\\AddNote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { convertFromHTML, convertToRaw, Editor, EditorState, RichUtils } from 'draft-js';\nimport Toolbar from '../../Hooks/Toolbar';\nimport axios from 'axios';\nimport './Dashboard.css';\nimport EditorComp from '../../Hooks/DraftEditor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddNote(_ref) {\n  _s();\n\n  let {\n    setCheckIfNewNoteAdded\n  } = _ref;\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n  const [checkIfNoteEdited, setCheckIfNoteEdited] = useState(false);\n  const [ClearNote, setClearNote] = useState(false); //   const handleKeyCommand = (command, editorState) => {\n  //     const newState = RichUtils.handleKeyCommand(editorState, command)\n  //     if (newState) {\n  //       setEditorState(newState)\n  //       setCheckIfNoteEdited(true)\n  //       return 'handled'\n  //     }\n  //     return 'not handled'\n  //   }\n\n  const submitNote = async () => {\n    if (checkIfNoteEdited && editorState.getCurrentContent().hasText()) {\n      await axios.post('/api/dashboard/notes', {\n        body: JSON.stringify(convertToRaw(editorState.getCurrentContent()))\n      });\n      setEditorState(EditorState.createEmpty());\n      setCheckIfNewNoteAdded(true);\n      setCheckIfNoteEdited(false);\n    } else console.log('eeee');\n  };\n\n  const clearNote = () => {\n    setEditorState(EditorState.createEmpty());\n    setCheckIfNoteEdited(false);\n  }; //   const onChange = (newState) => {\n  //     const currentContentState = editorState.getCurrentContent()\n  //     const newContentState = newState.getCurrentContent()\n  //     setEditorState(newState)\n  //     if (currentContentState !== newContentState) {\n  //       setCheckIfNoteEdited(true)\n  //       console.log('chaning')\n  //     } else {\n  //       console.log('not changing')\n  //     }\n  //   }\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"addNote-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addNote-container\",\n      children: [/*#__PURE__*/_jsxDEV(EditorComp, {\n        editorState: editorState,\n        setEditorState: setEditorState,\n        placeholderText: \"Start typing...\",\n        setCheckIfNoteEdited: setCheckIfNoteEdited,\n        ClearNote: ClearNote,\n        setClearNote: setClearNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitNote,\n        children: \" Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearNote,\n        children: \" Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddNote, \"2ldSaOThqGErfEb48oC7mYFH//A=\");\n\n_c = AddNote;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNote\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Components/Dashboard/AddNote.js"],"names":["React","useEffect","useState","convertFromHTML","convertToRaw","Editor","EditorState","RichUtils","Toolbar","axios","EditorComp","AddNote","setCheckIfNewNoteAdded","editorState","setEditorState","createEmpty","checkIfNoteEdited","setCheckIfNoteEdited","ClearNote","setClearNote","submitNote","getCurrentContent","hasText","post","body","JSON","stringify","console","log","clearNote"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,eADF,EAEEC,YAFF,EAGEC,MAHF,EAIEC,WAJF,EAKEC,SALF,QAMO,UANP;AAOA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AACA,eAAe,SAASC,OAAT,OAA6C;AAAA;;AAAA,MAA5B;AAAEC,IAAAA;AAAF,GAA4B;AAC1D,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,MAC7CI,WAAW,CAACS,WAAZ,EAD4C,CAA9C;AAGA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4Cf,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C,CAL0D,CAO1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMkB,UAAU,GAAG,YAAY;AAC7B,QAAIJ,iBAAiB,IAAIH,WAAW,CAACQ,iBAAZ,GAAgCC,OAAhC,EAAzB,EAAoE;AAClE,YAAMb,KAAK,CAACc,IAAN,CAAW,sBAAX,EAAmC;AACvCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAetB,YAAY,CAACS,WAAW,CAACQ,iBAAZ,EAAD,CAA3B;AADiC,OAAnC,CAAN;AAGAP,MAAAA,cAAc,CAACR,WAAW,CAACS,WAAZ,EAAD,CAAd;AACAH,MAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACAK,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,KAPD,MAOOU,OAAO,CAACC,GAAR,CAAY,MAAZ;AACR,GATD;;AAUA,QAAMC,SAAS,GAAG,MAAM;AACtBf,IAAAA,cAAc,CAACR,WAAW,CAACS,WAAZ,EAAD,CAAd;AACAE,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,GAHD,CA1B0D,CA+B1D;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAS,IAAA,SAAS,EAAC,iBAAnB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BAUE,QAAC,UAAD;AACE,QAAA,WAAW,EAAEJ,WADf;AAEE,QAAA,cAAc,EAAEC,cAFlB;AAGE,QAAA,eAAe,EAAC,iBAHlB;AAIE,QAAA,oBAAoB,EAAEG,oBAJxB;AAKE,QAAA,SAAS,EAAEC,SALb;AAME,QAAA,YAAY,EAAEC;AANhB;AAAA;AAAA;AAAA;AAAA,cAVF,eAmBE;AAAQ,QAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eAoBE;AAAQ,QAAA,OAAO,EAAES,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GAtEuBlB,O;;KAAAA,O","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport {\r\n  convertFromHTML,\r\n  convertToRaw,\r\n  Editor,\r\n  EditorState,\r\n  RichUtils,\r\n} from 'draft-js'\r\nimport Toolbar from '../../Hooks/Toolbar'\r\nimport axios from 'axios'\r\nimport './Dashboard.css'\r\nimport EditorComp from '../../Hooks/DraftEditor'\r\nexport default function AddNote({ setCheckIfNewNoteAdded }) {\r\n  const [editorState, setEditorState] = useState(() =>\r\n    EditorState.createEmpty()\r\n  )\r\n  const [checkIfNoteEdited, setCheckIfNoteEdited] = useState(false)\r\n  const [ClearNote, setClearNote] = useState(false)\r\n\r\n  //   const handleKeyCommand = (command, editorState) => {\r\n  //     const newState = RichUtils.handleKeyCommand(editorState, command)\r\n  //     if (newState) {\r\n  //       setEditorState(newState)\r\n  //       setCheckIfNoteEdited(true)\r\n  //       return 'handled'\r\n  //     }\r\n  //     return 'not handled'\r\n  //   }\r\n  const submitNote = async () => {\r\n    if (checkIfNoteEdited && editorState.getCurrentContent().hasText()) {\r\n      await axios.post('/api/dashboard/notes', {\r\n        body: JSON.stringify(convertToRaw(editorState.getCurrentContent())),\r\n      })\r\n      setEditorState(EditorState.createEmpty())\r\n      setCheckIfNewNoteAdded(true)\r\n      setCheckIfNoteEdited(false)\r\n    } else console.log('eeee')\r\n  }\r\n  const clearNote = () => {\r\n    setEditorState(EditorState.createEmpty())\r\n    setCheckIfNoteEdited(false)\r\n  }\r\n\r\n  //   const onChange = (newState) => {\r\n  //     const currentContentState = editorState.getCurrentContent()\r\n  //     const newContentState = newState.getCurrentContent()\r\n  //     setEditorState(newState)\r\n  //     if (currentContentState !== newContentState) {\r\n  //       setCheckIfNoteEdited(true)\r\n\r\n  //       console.log('chaning')\r\n  //     } else {\r\n  //       console.log('not changing')\r\n  //     }\r\n  //   }\r\n\r\n  return (\r\n    <section className='addNote-wrapper'>\r\n      <div className='addNote-container'>\r\n        {/* <Editor\r\n          editorState={editorState}\r\n          value={editorState}\r\n          onChange={onChange}\r\n          placeholder='Start typing...'\r\n          //   onChange={setEditorState}\r\n          handleKeyCommand={handleKeyCommand}\r\n          className='addNote-editor'\r\n        /> */}\r\n        <EditorComp\r\n          editorState={editorState}\r\n          setEditorState={setEditorState}\r\n          placeholderText='Start typing...'\r\n          setCheckIfNoteEdited={setCheckIfNoteEdited}\r\n          ClearNote={ClearNote}\r\n          setClearNote={setClearNote}\r\n        />\r\n        {/* <Toolbar editorState={editorState} setEditorState={setEditorState} /> */}\r\n        <button onClick={submitNote}> Save</button>\r\n        <button onClick={clearNote}> Clear</button>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}