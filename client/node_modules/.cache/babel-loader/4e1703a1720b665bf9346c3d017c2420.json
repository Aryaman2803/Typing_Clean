{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Hooks\\\\DraftEditor.js\";\nimport React from 'react';\nimport { Editor, RichUtils } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport Toolbar from './Toolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditorComp = _ref => {\n  let {\n    editorState,\n    setEditorState,\n    placeholderText,\n    setCheckIfNoteEdited,\n    showToolbar,\n    submitNote\n  } = _ref;\n\n  const handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      setEditorState(newState);\n      setCheckIfNoteEdited(true);\n    }\n  };\n\n  const onChange = newState => {\n    const currentContentState = editorState.getCurrentContent();\n    const newContentState = newState.getCurrentContent();\n    setEditorState(newState);\n\n    if (currentContentState !== newContentState) {\n      setCheckIfNoteEdited(true);\n      console.log('chaning');\n    } else {\n      console.log('not changing');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Editor, {\n      editorState: editorState,\n      value: editorState,\n      onChange: onChange,\n      placeholder: placeholderText,\n      handleKeyCommand: handleKeyCommand\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), showToolbar && /*#__PURE__*/_jsxDEV(Toolbar, {\n      editorState: editorState,\n      setEditorState: setEditorState,\n      submitNote: submitNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_c = EditorComp;\nexport default EditorComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorComp\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Hooks/DraftEditor.js"],"names":["React","Editor","RichUtils","Toolbar","EditorComp","editorState","setEditorState","placeholderText","setCheckIfNoteEdited","showToolbar","submitNote","handleKeyCommand","command","newState","onChange","currentContentState","getCurrentContent","newContentState","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,UAAlC;AACA,OAAO,yBAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;;;;AACA,MAAMC,UAAU,GAAG,QAOb;AAAA,MAPc;AAClBC,IAAAA,WADkB;AAElBC,IAAAA,cAFkB;AAGlBC,IAAAA,eAHkB;AAIlBC,IAAAA,oBAJkB;AAKlBC,IAAAA,WALkB;AAMlBC,IAAAA;AANkB,GAOd;;AACJ,QAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAUP,WAAV,KAA0B;AACjD,UAAMQ,QAAQ,GAAGX,SAAS,CAACS,gBAAV,CAA2BN,WAA3B,EAAwCO,OAAxC,CAAjB;;AACA,QAAIC,QAAJ,EAAc;AACZP,MAAAA,cAAc,CAACO,QAAD,CAAd;AACAL,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD;AACF,GAND;;AAOA,QAAMM,QAAQ,GAAID,QAAD,IAAc;AAC7B,UAAME,mBAAmB,GAAGV,WAAW,CAACW,iBAAZ,EAA5B;AACA,UAAMC,eAAe,GAAGJ,QAAQ,CAACG,iBAAT,EAAxB;AACAV,IAAAA,cAAc,CAACO,QAAD,CAAd;;AACA,QAAIE,mBAAmB,KAAKE,eAA5B,EAA6C;AAC3CT,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,KAHD,MAGO;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD;AACF,GAVD;;AAYA,sBACE;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,WAAW,EAAEd,WADf;AAEE,MAAA,KAAK,EAAEA,WAFT;AAGE,MAAA,QAAQ,EAAES,QAHZ;AAIE,MAAA,WAAW,EAAEP,eAJf;AAKE,MAAA,gBAAgB,EAAEI;AALpB;AAAA;AAAA;AAAA;AAAA,YADF,EAQGF,WAAW,iBACV,QAAC,OAAD;AAAS,MAAA,WAAW,EAAEJ,WAAtB;AAAmC,MAAA,cAAc,EAAEC,cAAnD;AAAmE,MAAA,UAAU,EAAEI;AAA/E;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADF;AAcD,CAzCD;;KAAMN,U;AA2CN,eAAeA,UAAf","sourcesContent":["import React from 'react'\r\nimport { Editor, RichUtils } from 'draft-js'\r\nimport 'draft-js/dist/Draft.css'\r\nimport Toolbar from './Toolbar'\r\nconst EditorComp = ({\r\n  editorState,\r\n  setEditorState,\r\n  placeholderText,\r\n  setCheckIfNoteEdited,\r\n  showToolbar,\r\n  submitNote,\r\n}) => {\r\n  const handleKeyCommand = (command, editorState) => {\r\n    const newState = RichUtils.handleKeyCommand(editorState, command)\r\n    if (newState) {\r\n      setEditorState(newState)\r\n      setCheckIfNoteEdited(true)\r\n    }\r\n  }\r\n  const onChange = (newState) => {\r\n    const currentContentState = editorState.getCurrentContent()\r\n    const newContentState = newState.getCurrentContent()\r\n    setEditorState(newState)\r\n    if (currentContentState !== newContentState) {\r\n      setCheckIfNoteEdited(true)\r\n      console.log('chaning')\r\n    } else {\r\n      console.log('not changing')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Editor\r\n        editorState={editorState}\r\n        value={editorState}\r\n        onChange={onChange}\r\n        placeholder={placeholderText}\r\n        handleKeyCommand={handleKeyCommand}\r\n      />\r\n      {showToolbar && (\r\n        <Toolbar editorState={editorState} setEditorState={setEditorState} submitNote={submitNote}/>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditorComp\r\n"]},"metadata":{},"sourceType":"module"}