{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Hooks\\\\DraftEditor.js\";\nimport React, { useState } from 'react';\nimport { Editor, EditorState, convertToRaw, RichUtils } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport Toolbar from './Toolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditorComp = _ref => {\n  let {\n    editorState,\n    setEditorState,\n    placeholderText,\n    setCheckIfNoteEdited,\n    showToolbar\n  } = _ref;\n\n  // const [editorState, setEditorState] = useState(() =>\n  //   EditorState.createEmpty()\n  // )\n  const handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      setEditorState(newState);\n      setCheckIfNoteEdited(true);\n    }\n  };\n\n  const onChange = newState => {\n    const currentContentState = editorState.getCurrentContent();\n    const newContentState = newState.getCurrentContent();\n    setEditorState(newState);\n\n    if (currentContentState !== newContentState) {\n      setCheckIfNoteEdited(true);\n      console.log('chaning');\n    } else {\n      console.log('not changing');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Editor, {\n      editorState: editorState,\n      value: editorState,\n      onChange: onChange,\n      placeholder: placeholderText,\n      handleKeyCommand: handleKeyCommand\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), showToolbar && /*#__PURE__*/_jsxDEV(Toolbar, {\n      editorState: editorState,\n      setEditorState: setEditorState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_c = EditorComp;\nexport default EditorComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorComp\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Hooks/DraftEditor.js"],"names":["React","useState","Editor","EditorState","convertToRaw","RichUtils","Toolbar","EditorComp","editorState","setEditorState","placeholderText","setCheckIfNoteEdited","showToolbar","handleKeyCommand","command","newState","onChange","currentContentState","getCurrentContent","newContentState","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,YAA9B,EAA4CC,SAA5C,QAA6D,UAA7D;AACA,OAAO,yBAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;;;;AACA,MAAMC,UAAU,GAAG,QAMb;AAAA,MANc;AAClBC,IAAAA,WADkB;AAElBC,IAAAA,cAFkB;AAGlBC,IAAAA,eAHkB;AAIlBC,IAAAA,oBAJkB;AAKlBC,IAAAA;AALkB,GAMd;;AACJ;AACA;AACA;AACA,QAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAUN,WAAV,KAA0B;AACjD,UAAMO,QAAQ,GAAGV,SAAS,CAACQ,gBAAV,CAA2BL,WAA3B,EAAwCM,OAAxC,CAAjB;;AACA,QAAIC,QAAJ,EAAc;AACZN,MAAAA,cAAc,CAACM,QAAD,CAAd;AACAJ,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD;AACF,GAND;;AAOA,QAAMK,QAAQ,GAAID,QAAD,IAAc;AAC7B,UAAME,mBAAmB,GAAGT,WAAW,CAACU,iBAAZ,EAA5B;AACA,UAAMC,eAAe,GAAGJ,QAAQ,CAACG,iBAAT,EAAxB;AACAT,IAAAA,cAAc,CAACM,QAAD,CAAd;;AACA,QAAIE,mBAAmB,KAAKE,eAA5B,EAA6C;AAC3CR,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,KAHD,MAGO;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD;AACF,GAVD;;AAYA,sBACE;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,WAAW,EAAEb,WADf;AAEE,MAAA,KAAK,EAAEA,WAFT;AAGE,MAAA,QAAQ,EAAEQ,QAHZ;AAIE,MAAA,WAAW,EAAEN,eAJf;AAKE,MAAA,gBAAgB,EAAEG;AALpB;AAAA;AAAA;AAAA;AAAA,YADF,EAQGD,WAAW,iBACV,QAAC,OAAD;AAAS,MAAA,WAAW,EAAEJ,WAAtB;AAAmC,MAAA,cAAc,EAAEC;AAAnD;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADF;AAcD,CA3CD;;KAAMF,U;AA6CN,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { Editor, EditorState, convertToRaw, RichUtils } from 'draft-js'\r\nimport 'draft-js/dist/Draft.css'\r\nimport Toolbar from './Toolbar'\r\nconst EditorComp = ({\r\n  editorState,\r\n  setEditorState,\r\n  placeholderText,\r\n  setCheckIfNoteEdited,\r\n  showToolbar,\r\n}) => {\r\n  // const [editorState, setEditorState] = useState(() =>\r\n  //   EditorState.createEmpty()\r\n  // )\r\n  const handleKeyCommand = (command, editorState) => {\r\n    const newState = RichUtils.handleKeyCommand(editorState, command)\r\n    if (newState) {\r\n      setEditorState(newState)\r\n      setCheckIfNoteEdited(true)\r\n    }\r\n  }\r\n  const onChange = (newState) => {\r\n    const currentContentState = editorState.getCurrentContent()\r\n    const newContentState = newState.getCurrentContent()\r\n    setEditorState(newState)\r\n    if (currentContentState !== newContentState) {\r\n      setCheckIfNoteEdited(true)\r\n      console.log('chaning')\r\n    } else {\r\n      console.log('not changing')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Editor\r\n        editorState={editorState}\r\n        value={editorState}\r\n        onChange={onChange}\r\n        placeholder={placeholderText}\r\n        handleKeyCommand={handleKeyCommand}\r\n      />\r\n      {showToolbar && (\r\n        <Toolbar editorState={editorState} setEditorState={setEditorState} />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditorComp\r\n"]},"metadata":{},"sourceType":"module"}