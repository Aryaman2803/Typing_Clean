{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Hooks\\\\ModalEditor.js\";\nimport React, { useContext, useState } from 'react';\nimport { Editor, RichUtils } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport Toolbar from './Toolbar';\nimport userNotesContext from '../Context/userNotesContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ModalEditor = _ref => {\n  let {\n    editorState,\n    setEditorState,\n    setCheckIfNoteIsEdited,\n    placeholderText,\n    isReadOnly,\n    CheckIfNoteIsEdited //   setCheckIfNoteUpdated,\n\n  } = _ref;\n\n  // const { CheckIfNoteUpdated, setCheckIfNoteUpdated } =\n  //   useContext(userNotesContext)\n  const handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      setEditorState(newState);\n      setCheckIfNoteIsEdited(true);\n    }\n  };\n\n  console.log(CheckIfNoteIsEdited, 'setCheckIfNoteIsEdited from ModalEditor');\n\n  const onChange = newState => {\n    const currentContentState = editorState.getCurrentContent();\n    const newContentState = newState.getCurrentContent();\n    setEditorState(newState);\n\n    if (currentContentState !== newContentState) {\n      //   setCheckIfNoteUpdated(true)\n      setCheckIfNoteIsEdited(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Editor, {\n      editorState: editorState,\n      onChange: onChange,\n      placeholder: placeholderText,\n      handleKeyCommand: handleKeyCommand,\n      readOnly: isReadOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = ModalEditor;\nexport default ModalEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalEditor\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Hooks/ModalEditor.js"],"names":["React","useContext","useState","Editor","RichUtils","Toolbar","userNotesContext","ModalEditor","editorState","setEditorState","setCheckIfNoteIsEdited","placeholderText","isReadOnly","CheckIfNoteIsEdited","handleKeyCommand","command","newState","console","log","onChange","currentContentState","getCurrentContent","newContentState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,UAAlC;AACA,OAAO,yBAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;;;;AAEA,MAAMC,WAAW,GAAG,QAQd;AAAA,MARe;AACnBC,IAAAA,WADmB;AAEnBC,IAAAA,cAFmB;AAGnBC,IAAAA,sBAHmB;AAInBC,IAAAA,eAJmB;AAKnBC,IAAAA,UALmB;AAMnBC,IAAAA,mBANmB,CAOrB;;AAPqB,GAQf;;AACF;AACA;AACF,QAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAUP,WAAV,KAA0B;AACjD,UAAMQ,QAAQ,GAAGZ,SAAS,CAACU,gBAAV,CAA2BN,WAA3B,EAAwCO,OAAxC,CAAjB;;AACA,QAAIC,QAAJ,EAAc;AACZP,MAAAA,cAAc,CAACO,QAAD,CAAd;AACAN,MAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACD;AACF,GAND;;AAOAO,EAAAA,OAAO,CAACC,GAAR,CAAYL,mBAAZ,EAAgC,yCAAhC;;AAEA,QAAMM,QAAQ,GAAIH,QAAD,IAAc;AAC7B,UAAMI,mBAAmB,GAAGZ,WAAW,CAACa,iBAAZ,EAA5B;AACA,UAAMC,eAAe,GAAGN,QAAQ,CAACK,iBAAT,EAAxB;AACAZ,IAAAA,cAAc,CAACO,QAAD,CAAd;;AACA,QAAII,mBAAmB,KAAKE,eAA5B,EAA6C;AAC7C;AACEZ,MAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACD;AACF,GARD;;AASA,sBACE;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,WAAW,EAAEF,WADf;AAEE,MAAA,QAAQ,EAAEW,QAFZ;AAGE,MAAA,WAAW,EAAER,eAHf;AAIE,MAAA,gBAAgB,EAAEG,gBAJpB;AAKE,MAAA,QAAQ,EAAEF;AALZ;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAcD,CA3CD;;KAAML,W;AA6CN,eAAeA,WAAf","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport { Editor, RichUtils } from 'draft-js'\r\nimport 'draft-js/dist/Draft.css'\r\nimport Toolbar from './Toolbar'\r\nimport userNotesContext from '../Context/userNotesContext'\r\n\r\nconst ModalEditor = ({\r\n  editorState,\r\n  setEditorState,\r\n  setCheckIfNoteIsEdited,\r\n  placeholderText,\r\n  isReadOnly,\r\n  CheckIfNoteIsEdited\r\n//   setCheckIfNoteUpdated,\r\n}) => {\r\n    // const { CheckIfNoteUpdated, setCheckIfNoteUpdated } =\r\n    //   useContext(userNotesContext)\r\n  const handleKeyCommand = (command, editorState) => {\r\n    const newState = RichUtils.handleKeyCommand(editorState, command)\r\n    if (newState) {\r\n      setEditorState(newState)\r\n      setCheckIfNoteIsEdited(true)\r\n    }\r\n  }\r\n  console.log(CheckIfNoteIsEdited,'setCheckIfNoteIsEdited from ModalEditor');\r\n\r\n  const onChange = (newState) => {\r\n    const currentContentState = editorState.getCurrentContent()\r\n    const newContentState = newState.getCurrentContent()\r\n    setEditorState(newState)\r\n    if (currentContentState !== newContentState) {\r\n    //   setCheckIfNoteUpdated(true)\r\n      setCheckIfNoteIsEdited(true)\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Editor\r\n        editorState={editorState}\r\n        onChange={onChange}\r\n        placeholder={placeholderText}\r\n        handleKeyCommand={handleKeyCommand}\r\n        readOnly={isReadOnly}\r\n      />\r\n      {/* {showToolbar && (\r\n        <Toolbar editorState={editorState} setEditorState={setEditorState} />\r\n      )} */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ModalEditor\r\n"]},"metadata":{},"sourceType":"module"}