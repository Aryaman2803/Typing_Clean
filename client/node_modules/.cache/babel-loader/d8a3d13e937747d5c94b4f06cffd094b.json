{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Hooks\\\\Toolbar.js\";\nimport React from 'react';\nimport { RichUtils } from 'draft-js';\nimport FormatBoldIcon from '@mui/icons-material/FormatBold';\nimport { IconButton } from '@mui/material';\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic';\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';\nimport CodeIcon from '@mui/icons-material/Code';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\nimport FormatListNumberedIcon from '@mui/icons-material/FormatListNumbered';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport SaveIcon from '@mui/icons-material/Save';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Toolbar = props => {\n  const inlineStyles = [{\n    type: 'BOLD',\n    label: 'Bold',\n    toolTip: 'line',\n    icon: /*#__PURE__*/_jsxDEV(FormatBoldIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 59\n    }, this)\n  }, {\n    type: 'ITALIC',\n    label: 'Italic',\n    toolTip: 'Italic',\n    icon: /*#__PURE__*/_jsxDEV(FormatItalicIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, {\n    type: 'UNDERLINE',\n    label: 'Underline',\n    toolTip: 'Underline',\n    icon: /*#__PURE__*/_jsxDEV(FormatUnderlinedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)\n  }, {\n    type: 'CODE',\n    label: 'Code',\n    toolTip: 'Code Block',\n    icon: /*#__PURE__*/_jsxDEV(CodeIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }];\n  const blockStyles = [{\n    type: 'unordered-list-item',\n    label: 'Unordered List',\n    toolTip: 'Unordered List',\n    icon: /*#__PURE__*/_jsxDEV(FormatListBulletedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, {\n    type: 'ordered-list-item',\n    label: 'Ordered List',\n    toolTip: 'Ordered List',\n    icon: /*#__PURE__*/_jsxDEV(FormatListNumberedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }];\n  const {\n    editorState,\n    setEditorState,\n    switchFor,\n    submitNote,\n    handleDelete,\n    clearNote,\n    updatedAt\n  } = props;\n\n  const handleInlineStyle = (event, style) => {\n    event.preventDefault();\n    setEditorState(RichUtils.toggleInlineStyle(editorState, style));\n  };\n\n  const handleBlockStyle = (event, block) => {\n    event.preventDefault();\n    setEditorState(RichUtils.toggleBlockType(editorState, block));\n  };\n\n  const renderInlineStyleButton = (style, index) => {\n    const currentInlineStyle = editorState.getCurrentInlineStyle();\n    let className = 'toolbar-button';\n\n    if (currentInlineStyle.has(style.type)) {\n      className = 'toolbar-button-selected';\n    }\n\n    return /*#__PURE__*/_jsxDEV(IconButton, {\n      title: style.toolTip,\n      onMouseDown: event => handleInlineStyle(event, style.type),\n      onClick: event => event.preventDefault(),\n      className: className,\n      children: style.icon\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderBlockStyleButton = (block, index) => {\n    const currentBlockType = RichUtils.getCurrentBlockType(editorState);\n    let className = 'toolbar-button';\n\n    if (currentBlockType === block.type) {\n      className = 'toolbar-button-selected';\n    }\n\n    return /*#__PURE__*/_jsxDEV(IconButton, {\n      title: block.toolTip,\n      onMouseDown: event => handleInlineStyle(event, block.type),\n      onClick: event => event.preventDefault(),\n      className: className,\n      children: block.icon\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  };\n\n  const options = {\n    // weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  };\n  const updatedAtTime = new Date(updatedAt).toLocaleTimeString('en-US', options);\n  const updatedAtTimeFormat = {\n    paddingRight: '20px',\n    display: 'inline-block',\n    color: 'rgba(0,0,0,0.8)',\n    cursor: 'default',\n    letterSpacing: '.025em',\n    fontFamily: 'Roboto,Arial,sans-serif',\n    fontSize: '.75rem',\n    fontWeight: '400',\n    lineHeight: '1rem',\n    marginLeft: 'auto'\n  };\n  const editorToolbar = {\n    // border: '1px solid #ccc',\n    zIndex: '1',\n    display: 'flex',\n    padding: '0 0.4rem !important',\n    justifyContent: 'space-between',\n    boxShadow: 'rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: editorToolbar,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [inlineStyles.map((style, index) => {\n        return renderInlineStyleButton(style, index);\n      }), blockStyles.map((block, index) => {\n        return renderBlockStyleButton(block, index);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: updatedAtTimeFormat,\n        children: updatedAt ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Edited \", updatedAtTime]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \"Editing\"\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), switchFor === 'addNote' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: submitNote,\n          title: \"Save\",\n          children: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: clearNote,\n          title: \"Clear\",\n          children: /*#__PURE__*/_jsxDEV(ClearIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), switchFor === 'modaleditor' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleDelete,\n          title: \"Delete\",\n          children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Toolbar;\nexport default Toolbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Hooks/Toolbar.js"],"names":["React","RichUtils","FormatBoldIcon","IconButton","FormatItalicIcon","FormatUnderlinedIcon","CodeIcon","FormatListBulletedIcon","FormatListNumberedIcon","DeleteIcon","SaveIcon","ClearIcon","Toolbar","props","inlineStyles","type","label","toolTip","icon","blockStyles","editorState","setEditorState","switchFor","submitNote","handleDelete","clearNote","updatedAt","handleInlineStyle","event","style","preventDefault","toggleInlineStyle","handleBlockStyle","block","toggleBlockType","renderInlineStyleButton","index","currentInlineStyle","getCurrentInlineStyle","className","has","renderBlockStyleButton","currentBlockType","getCurrentBlockType","options","year","month","day","updatedAtTime","Date","toLocaleTimeString","updatedAtTimeFormat","paddingRight","display","color","cursor","letterSpacing","fontFamily","fontSize","fontWeight","lineHeight","marginLeft","editorToolbar","zIndex","padding","justifyContent","boxShadow","map"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { RichUtils } from 'draft-js'\r\nimport FormatBoldIcon from '@mui/icons-material/FormatBold'\r\nimport { IconButton } from '@mui/material'\r\nimport FormatItalicIcon from '@mui/icons-material/FormatItalic'\r\nimport FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined'\r\nimport CodeIcon from '@mui/icons-material/Code'\r\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted'\r\nimport FormatListNumberedIcon from '@mui/icons-material/FormatListNumbered'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport SaveIcon from '@mui/icons-material/Save'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\n\r\nconst Toolbar = (props) => {\r\n  const inlineStyles = [\r\n    { type: 'BOLD', label: 'Bold', toolTip: 'line', icon: <FormatBoldIcon /> },\r\n    {\r\n      type: 'ITALIC',\r\n      label: 'Italic',\r\n      toolTip: 'Italic',\r\n      icon: <FormatItalicIcon />,\r\n    },\r\n    {\r\n      type: 'UNDERLINE',\r\n      label: 'Underline',\r\n      toolTip: 'Underline',\r\n      icon: <FormatUnderlinedIcon />,\r\n    },\r\n    {\r\n      type: 'CODE',\r\n      label: 'Code',\r\n      toolTip: 'Code Block',\r\n      icon: <CodeIcon />,\r\n    },\r\n  ]\r\n\r\n  const blockStyles = [\r\n    {\r\n      type: 'unordered-list-item',\r\n      label: 'Unordered List',\r\n      toolTip: 'Unordered List',\r\n      icon: <FormatListBulletedIcon />,\r\n    },\r\n    {\r\n      type: 'ordered-list-item',\r\n      label: 'Ordered List',\r\n      toolTip: 'Ordered List',\r\n      icon: <FormatListNumberedIcon />,\r\n    },\r\n  ]\r\n\r\n  const {\r\n    editorState,\r\n    setEditorState,\r\n    switchFor,\r\n    submitNote,\r\n    handleDelete,\r\n    clearNote,\r\n    updatedAt,\r\n  } = props\r\n\r\n  const handleInlineStyle = (event, style) => {\r\n    event.preventDefault()\r\n    setEditorState(RichUtils.toggleInlineStyle(editorState, style))\r\n  }\r\n\r\n  const handleBlockStyle = (event, block) => {\r\n    event.preventDefault()\r\n    setEditorState(RichUtils.toggleBlockType(editorState, block))\r\n  }\r\n\r\n  const renderInlineStyleButton = (style, index) => {\r\n    const currentInlineStyle = editorState.getCurrentInlineStyle()\r\n    let className = 'toolbar-button'\r\n    if (currentInlineStyle.has(style.type)) {\r\n      className = 'toolbar-button-selected'\r\n    }\r\n\r\n    return (\r\n      <IconButton\r\n        key={index}\r\n        title={style.toolTip}\r\n        onMouseDown={(event) => handleInlineStyle(event, style.type)}\r\n        onClick={(event) => event.preventDefault()}\r\n        className={className}\r\n      >\r\n        {style.icon}\r\n      </IconButton>\r\n    )\r\n  }\r\n\r\n  const renderBlockStyleButton = (block, index) => {\r\n    const currentBlockType = RichUtils.getCurrentBlockType(editorState)\r\n    let className = 'toolbar-button'\r\n    if (currentBlockType === block.type) {\r\n      className = 'toolbar-button-selected'\r\n    }\r\n\r\n    return (\r\n      <IconButton\r\n        key={index}\r\n        title={block.toolTip}\r\n        onMouseDown={(event) => handleInlineStyle(event, block.type)}\r\n        onClick={(event) => event.preventDefault()}\r\n        className={className}\r\n      >\r\n        {block.icon}\r\n      </IconButton>\r\n    )\r\n  }\r\n  const options = {\r\n    // weekday: 'long',\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  }\r\n\r\n  const updatedAtTime = new Date(updatedAt).toLocaleTimeString('en-US',options)\r\n\r\n  const updatedAtTimeFormat = {\r\n    paddingRight: '20px',\r\n    display: 'inline-block',\r\n    color: 'rgba(0,0,0,0.8)',\r\n    cursor: 'default',\r\n    letterSpacing: '.025em',\r\n    fontFamily: 'Roboto,Arial,sans-serif',\r\n    fontSize: '.75rem',\r\n    fontWeight: '400',\r\n    lineHeight: '1rem',\r\n    marginLeft: 'auto',\r\n  }\r\n  const editorToolbar = {\r\n    // border: '1px solid #ccc',\r\n    zIndex: '1',\r\n    display: 'flex',\r\n    padding: '0 0.4rem !important',\r\n    justifyContent: 'space-between',\r\n    boxShadow:\r\n      'rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px',\r\n  }\r\n\r\n  return (\r\n    <div style={editorToolbar}>\r\n      <div>\r\n        {inlineStyles.map((style, index) => {\r\n          return renderInlineStyleButton(style, index)\r\n        })}\r\n        {blockStyles.map((block, index) => {\r\n          return renderBlockStyleButton(block, index)\r\n        })}\r\n      </div>\r\n      <div>\r\n        <span style={updatedAtTimeFormat}>\r\n          {updatedAt ? <>Edited {updatedAtTime}</> : <>Editing</>}\r\n        </span>\r\n        {switchFor === 'addNote' && (\r\n          <>\r\n            <IconButton onClick={submitNote} title='Save'>\r\n              <SaveIcon />\r\n            </IconButton>\r\n            <IconButton onClick={clearNote} title='Clear'>\r\n              <ClearIcon />\r\n            </IconButton>\r\n          </>\r\n        )}\r\n        {switchFor === 'modaleditor' && (\r\n          <>\r\n            <IconButton onClick={handleDelete} title='Delete'>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Toolbar\r\n"]},"metadata":{},"sourceType":"module"}