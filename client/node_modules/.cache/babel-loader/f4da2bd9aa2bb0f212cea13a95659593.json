{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Components\\\\Dashboard\\\\Modal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Dialog } from '@reach/dialog';\nimport '@reach/dialog/styles.css';\nimport axios from 'axios';\nimport DialogContent from '@mui/material/DialogContent';\nimport { TextareaAutosize } from '@mui/material';\nimport userNotesContext from '../../Context/userNotesContext';\nimport ContentEditable from 'react-contenteditable';\nimport './Dashboard.css';\nimport { ContentState, convertFromHTML, convertFromRaw, Editor, EditorState } from 'draft-js';\nimport EditorComp from '../../Hooks/DraftEditor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = EditorState.createEmpty();\n\nconst Modal = () => {\n  _s();\n\n  let navigate = useNavigate();\n  let {\n    id\n  } = useParams();\n  let buttonRef = useRef(null);\n  const {\n    setCheckIfNoteUpdated\n  } = useContext(userNotesContext);\n  const [CheckIfNoteIsEdited, setCheckIfNoteIsEdited] = useState(false);\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n\n  const onDismiss = async () => {\n    if (CheckIfNoteIsEdited) {\n      await axios.put(`/api/dashboard/notes/${id}`, {\n        title: Note.title,\n        body: Note.body\n      });\n      setCheckIfNoteUpdated(true);\n      setCheckIfNoteIsEdited(false);\n    }\n\n    navigate(-1);\n  };\n\n  const [Note, setNote] = useState({\n    id: id,\n    title: '',\n    body: ''\n  });\n\n  const fetchNote = async id => {\n    try {\n      const response = await axios.get(`/api/dashboard/${id}`, {\n        withCredentials: true\n      });\n\n      if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n        var _response$data, _response$data$note, _response$data2, _response$data2$note, _response$data3, _response$data3$note;\n\n        setNote({\n          title: response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$note = _response$data.note) === null || _response$data$note === void 0 ? void 0 : _response$data$note.title,\n          // body: response?.data?.note?.body,\n          body: response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$note = _response$data2.note) === null || _response$data2$note === void 0 ? void 0 : _response$data2$note.body\n        });\n        const content = convertFromRaw(response === null || response === void 0 ? void 0 : (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : (_response$data3$note = _response$data3.note) === null || _response$data3$note === void 0 ? void 0 : _response$data3$note.body); // setEditorState({editorState: EditorState.createWithContent(content)});\n\n        console.log(content); // console.log('has text?:',editorState.getCurrentContent());\n      }\n    } catch (err) {\n      console.log('error from dashboard js file', err);\n      navigate('/login');\n    }\n  }; // setEditorState({editorState: EditorState.createWithContent(convertFromRaw(Note.body))})\n  // console.log(editorState);\n\n\n  const onChange = e => {\n    setNote(prevState => ({ ...prevState,\n      [e.target.name]: e.target.value\n    }));\n    setCheckIfNoteIsEdited(true);\n  }; // console.log(CheckIfNoteIsEdited)\n\n\n  useEffect(() => {\n    fetchNote(id);\n  }, []);\n  if (!id) return null;\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    \"aria-labelledby\": \"label\",\n    className: \"modal-wrapper\",\n    onDismiss: onDismiss,\n    initialFocusRef: buttonRef // style={{padding: '0px'}}\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-wrapper-inner sc1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Modal, \"A07BSKU7bD6NSrKCICaKztBYOuU=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = Modal;\nexport default Modal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Components/Dashboard/Modal.js"],"names":["React","useContext","useEffect","useRef","useState","useNavigate","useParams","Dialog","axios","DialogContent","TextareaAutosize","userNotesContext","ContentEditable","ContentState","convertFromHTML","convertFromRaw","Editor","EditorState","EditorComp","initialState","createEmpty","Modal","navigate","id","buttonRef","setCheckIfNoteUpdated","CheckIfNoteIsEdited","setCheckIfNoteIsEdited","editorState","setEditorState","onDismiss","put","title","Note","body","setNote","fetchNote","response","get","withCredentials","status","data","note","content","console","log","err","onChange","e","prevState","target","name","value"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { Dialog } from '@reach/dialog'\r\nimport '@reach/dialog/styles.css'\r\nimport axios from 'axios'\r\nimport DialogContent from '@mui/material/DialogContent'\r\nimport { TextareaAutosize } from '@mui/material'\r\nimport userNotesContext from '../../Context/userNotesContext'\r\nimport ContentEditable from 'react-contenteditable'\r\nimport './Dashboard.css'\r\nimport {\r\n  ContentState,\r\n  convertFromHTML,\r\n  convertFromRaw,\r\n  Editor,\r\n  EditorState,\r\n} from 'draft-js'\r\nimport EditorComp from '../../Hooks/DraftEditor'\r\nconst initialState = EditorState.createEmpty()\r\n\r\nconst Modal = () => {\r\n  let navigate = useNavigate()\r\n  let { id } = useParams()\r\n  let buttonRef = useRef(null)\r\n  const { setCheckIfNoteUpdated } = useContext(userNotesContext)\r\n  const [CheckIfNoteIsEdited, setCheckIfNoteIsEdited] = useState(false)\r\n  const [editorState, setEditorState] = useState(() =>\r\n    EditorState.createEmpty()\r\n  )\r\n\r\n  const onDismiss = async () => {\r\n    if (CheckIfNoteIsEdited) {\r\n      await axios.put(`/api/dashboard/notes/${id}`, {\r\n        title: Note.title,\r\n        body: Note.body,\r\n      })\r\n      setCheckIfNoteUpdated(true)\r\n      setCheckIfNoteIsEdited(false)\r\n    }\r\n\r\n    navigate(-1)\r\n  }\r\n  const [Note, setNote] = useState({\r\n    id: id,\r\n    title: '',\r\n    body: '',\r\n  })\r\n\r\n  const fetchNote = async (id) => {\r\n    try {\r\n      const response = await axios.get(`/api/dashboard/${id}`, {\r\n        withCredentials: true,\r\n      })\r\n      if (response?.status === 200) {\r\n        setNote({\r\n          title: response?.data?.note?.title,\r\n          // body: response?.data?.note?.body,\r\n          body: response?.data?.note?.body,\r\n        })\r\n        const content =  (convertFromRaw(response?.data?.note?.body));\r\n        // setEditorState({editorState: EditorState.createWithContent(content)});\r\n        console.log(content);\r\n        // console.log('has text?:',editorState.getCurrentContent());\r\n      }\r\n    } catch (err) {\r\n      console.log('error from dashboard js file', err)\r\n      navigate('/login')\r\n    }\r\n  }\r\n  // setEditorState({editorState: EditorState.createWithContent(convertFromRaw(Note.body))})\r\n  // console.log(editorState);\r\n  const onChange = (e) => {\r\n    setNote((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.value,\r\n    }))\r\n    setCheckIfNoteIsEdited(true)\r\n  }\r\n  // console.log(CheckIfNoteIsEdited)\r\n\r\n  useEffect(() => {\r\n    fetchNote(id)\r\n  }, [])\r\n\r\n  if (!id) return null\r\n  return (\r\n    <Dialog\r\n      aria-labelledby='label'\r\n      className='modal-wrapper'\r\n      onDismiss={onDismiss}\r\n      initialFocusRef={buttonRef}\r\n      // style={{padding: '0px'}}\r\n    >\r\n      <div className='modal-wrapper-inner sc1'>\r\n        {/* <EditorComp /> */}\r\n        {/* <ContentEditable\r\n          className='title-contenteditable'\r\n          html={Note.title}\r\n          onChange={(e) =>\r\n            onChange({ target: { name: 'title', value: e.target.value } })\r\n          }\r\n          name='title'\r\n          placeholder='Title'\r\n          // defaultValue={Note.title}\r\n        /> */}\r\n        {/* <ContentEditable\r\n          className='body-contenteditable'\r\n          html={Note.body}\r\n          onChange={(e) =>\r\n            onChange({ target: { name: 'body', value: e.target.value } })\r\n          }\r\n          name='body'\r\n          placeholder='Type your note here'\r\n          // defaultValue={Note.title}\r\n        /> */}\r\n        {/* <TextareaAutosize\r\n          aria-label='Enter Title'\r\n          // minRows={3}\r\n          style={{\r\n            padding: '0.7rem',\r\n            fontSize: '1.5rem',\r\n            width: '100%',\r\n            boxSizing: 'border-box',\r\n          }}\r\n          name='title'\r\n          placeholder='Title'\r\n          onChange={onChange}\r\n          defaultValue={Note?.title}\r\n        /> */}\r\n        {/* <DialogContent dividers> */}\r\n        {/* <TextareaAutosize\r\n          aria-label='Enter Body'\r\n          placeholder='Body'\r\n          minRows={10}\r\n          name='body'\r\n          onChange={onChange}\r\n          className='body-contenteditable'\r\n          defaultValue={Note?.body}\r\n        /> */}\r\n        {/* </DialogContent> */}\r\n      </div>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n"]},"metadata":{},"sourceType":"module"}