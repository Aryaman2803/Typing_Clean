{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Hooks\\\\Toolbar.js\";\nimport React from \"react\";\nimport { RichUtils } from \"draft-js\";\nimport { inlineStyles, blockStyles } from \"../styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Toolbar = props => {\n  const {\n    editorState,\n    setEditorState\n  } = props;\n\n  const handleInlineStyle = (event, style) => {\n    event.preventDefault();\n    setEditorState(RichUtils.toggleInlineStyle(editorState, style));\n  };\n\n  const handleBlockStyle = (event, block) => {\n    event.preventDefault();\n    setEditorState(RichUtils.toggleBlockType(editorState, block));\n  };\n\n  const renderInlineStyleButton = (style, index) => {\n    const currentInlineStyle = editorState.getCurrentInlineStyle();\n    let className = \"toolbar-button\";\n\n    if (currentInlineStyle.has(style.type)) {\n      className = \"toolbar-button-selected\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      title: style.toolTip,\n      onMouseDown: event => handleInlineStyle(event, style.type),\n      onClick: event => event.preventDefault(),\n      className: className,\n      children: style.label\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderBlockStyleButton = (block, index) => {\n    const currentBlockType = RichUtils.getCurrentBlockType(editorState);\n    let className = \"toolbar-button\";\n\n    if (currentBlockType === block.type) {\n      className = \"toolbar-button-selected\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      title: block.toolTip,\n      onMouseDown: event => handleBlockStyle(event, block.type),\n      onClick: event => event.preventDefault(),\n      className: className,\n      children: block.label\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"editor-toolbar\",\n    children: [inlineStyles.map((style, index) => {\n      return renderInlineStyleButton(style, index);\n    }), blockStyles.map((block, index) => {\n      return renderBlockStyleButton(block, index);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Toolbar;\nexport default Toolbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Toolbar\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Hooks/Toolbar.js"],"names":["React","RichUtils","inlineStyles","blockStyles","Toolbar","props","editorState","setEditorState","handleInlineStyle","event","style","preventDefault","toggleInlineStyle","handleBlockStyle","block","toggleBlockType","renderInlineStyleButton","index","currentInlineStyle","getCurrentInlineStyle","className","has","type","toolTip","label","renderBlockStyleButton","currentBlockType","getCurrentBlockType","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,WAA1C;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCF,KAAxC;;AAEA,QAAMG,iBAAiB,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC1CD,IAAAA,KAAK,CAACE,cAAN;AACAJ,IAAAA,cAAc,CAACN,SAAS,CAACW,iBAAV,CAA4BN,WAA5B,EAAyCI,KAAzC,CAAD,CAAd;AACD,GAHD;;AAKA,QAAMG,gBAAgB,GAAG,CAACJ,KAAD,EAAQK,KAAR,KAAkB;AACzCL,IAAAA,KAAK,CAACE,cAAN;AACAJ,IAAAA,cAAc,CAACN,SAAS,CAACc,eAAV,CAA0BT,WAA1B,EAAuCQ,KAAvC,CAAD,CAAd;AACD,GAHD;;AAKA,QAAME,uBAAuB,GAAG,CAACN,KAAD,EAAQO,KAAR,KAAkB;AAChD,UAAMC,kBAAkB,GAAGZ,WAAW,CAACa,qBAAZ,EAA3B;AACA,QAAIC,SAAS,GAAG,gBAAhB;;AACA,QAAIF,kBAAkB,CAACG,GAAnB,CAAuBX,KAAK,CAACY,IAA7B,CAAJ,EAAwC;AACtCF,MAAAA,SAAS,GAAG,yBAAZ;AACD;;AAED,wBACE;AAEE,MAAA,KAAK,EAAEV,KAAK,CAACa,OAFf;AAGE,MAAA,WAAW,EAAGd,KAAD,IAAWD,iBAAiB,CAACC,KAAD,EAAQC,KAAK,CAACY,IAAd,CAH3C;AAIE,MAAA,OAAO,EAAGb,KAAD,IAAWA,KAAK,CAACE,cAAN,EAJtB;AAKE,MAAA,SAAS,EAAES,SALb;AAAA,gBAOCV,KAAK,CAACc;AAPP,OACOP,KADP;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,GAlBD;;AAoBA,QAAMQ,sBAAsB,GAAG,CAACX,KAAD,EAAQG,KAAR,KAAkB;AAC/C,UAAMS,gBAAgB,GAAGzB,SAAS,CAAC0B,mBAAV,CAA8BrB,WAA9B,CAAzB;AACA,QAAIc,SAAS,GAAG,gBAAhB;;AACA,QAAIM,gBAAgB,KAAKZ,KAAK,CAACQ,IAA/B,EAAqC;AACnCF,MAAAA,SAAS,GAAG,yBAAZ;AACD;;AAED,wBACE;AAEE,MAAA,KAAK,EAAEN,KAAK,CAACS,OAFf;AAGE,MAAA,WAAW,EAAGd,KAAD,IAAWI,gBAAgB,CAACJ,KAAD,EAAQK,KAAK,CAACQ,IAAd,CAH1C;AAIE,MAAA,OAAO,EAAGb,KAAD,IAAWA,KAAK,CAACE,cAAN,EAJtB;AAKE,MAAA,SAAS,EAAES,SALb;AAAA,gBAOCN,KAAK,CAACU;AAPP,OACOP,KADP;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,GAlBD;;AAoBA,sBACE;AAAK,IAAA,EAAE,EAAC,gBAAR;AAAA,eACGf,YAAY,CAAC0B,GAAb,CAAiB,CAAClB,KAAD,EAAQO,KAAR,KAAkB;AAClC,aAAOD,uBAAuB,CAACN,KAAD,EAAQO,KAAR,CAA9B;AACD,KAFA,CADH,EAIGd,WAAW,CAACyB,GAAZ,CAAgB,CAACd,KAAD,EAAQG,KAAR,KAAkB;AACjC,aAAOQ,sBAAsB,CAACX,KAAD,EAAQG,KAAR,CAA7B;AACD,KAFA,CAJH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA/DD;;KAAMb,O;AAiEN,eAAeA,OAAf","sourcesContent":["import React from \"react\";\r\nimport { RichUtils } from \"draft-js\";\r\nimport { inlineStyles, blockStyles } from \"../styles\";\r\n\r\nconst Toolbar = (props) => {\r\n  const { editorState, setEditorState } = props;\r\n\r\n  const handleInlineStyle = (event, style) => {\r\n    event.preventDefault();\r\n    setEditorState(RichUtils.toggleInlineStyle(editorState, style));\r\n  };\r\n\r\n  const handleBlockStyle = (event, block) => {\r\n    event.preventDefault();\r\n    setEditorState(RichUtils.toggleBlockType(editorState, block));\r\n  };\r\n\r\n  const renderInlineStyleButton = (style, index) => {\r\n    const currentInlineStyle = editorState.getCurrentInlineStyle();\r\n    let className = \"toolbar-button\";\r\n    if (currentInlineStyle.has(style.type)) {\r\n      className = \"toolbar-button-selected\";\r\n    }\r\n\r\n    return (\r\n      <button\r\n        key={index}\r\n        title={style.toolTip}\r\n        onMouseDown={(event) => handleInlineStyle(event, style.type)}\r\n        onClick={(event) => event.preventDefault()}\r\n        className={className}\r\n      >\r\n      {style.label}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  const renderBlockStyleButton = (block, index) => {\r\n    const currentBlockType = RichUtils.getCurrentBlockType(editorState);\r\n    let className = \"toolbar-button\";\r\n    if (currentBlockType === block.type) {\r\n      className = \"toolbar-button-selected\";\r\n    }\r\n\r\n    return (\r\n      <button\r\n        key={index}\r\n        title={block.toolTip}\r\n        onMouseDown={(event) => handleBlockStyle(event, block.type)}\r\n        onClick={(event) => event.preventDefault()}\r\n        className={className}\r\n      >\r\n      {block.label}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div id=\"editor-toolbar\">\r\n      {inlineStyles.map((style, index) => {\r\n        return renderInlineStyleButton(style, index);\r\n      })}\r\n      {blockStyles.map((block, index) => {\r\n        return renderBlockStyleButton(block, index);\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toolbar;"]},"metadata":{},"sourceType":"module"}