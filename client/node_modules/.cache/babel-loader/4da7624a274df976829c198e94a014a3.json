{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Components\\\\Dashboard\\\\AddNote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { convertToRaw, EditorState } from 'draft-js';\nimport axios from 'axios';\nimport './Dashboard.css';\nimport EditorComp from '../../Hooks/DraftEditor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddNote(_ref) {\n  _s();\n\n  let {\n    setCheckIfNewNoteAdded\n  } = _ref;\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n  const [editorStateTitle, setEditorStateTitle] = useState(() => EditorState.createEmpty());\n  const [checkIfNoteEdited, setCheckIfNoteEdited] = useState(false);\n  const [DisplayNote, setDisplayNote] = useState(false);\n  const bodyInputRef = useRef(null); //   const handleKeyCommand = (command, editorState) => {\n  //     const newState = RichUtils.handleKeyCommand(editorState, command)\n  //     if (newState) {\n  //       setEditorState(newState)\n  //       setCheckIfNoteEdited(true)\n  //       return 'handled'\n  //     }\n  //     return 'not handled'\n  //   }\n\n  const submitNote = async () => {\n    if (checkIfNoteEdited && (editorStateTitle.getCurrentContent().hasText() || editorState.getCurrentContent().hasText())) {\n      await axios.post('/api/dashboard/notes', {\n        body: JSON.stringify(convertToRaw(editorState.getCurrentContent()))\n      });\n      setEditorState(EditorState.createEmpty());\n      setEditorStateTitle(EditorState.createEmpty());\n      setCheckIfNewNoteAdded(true);\n      setCheckIfNoteEdited(false);\n    } else console.log('eeee');\n  };\n\n  const clearNote = () => {\n    setEditorState(EditorState.createEmpty());\n    setEditorStateTitle(EditorState.createEmpty());\n    setCheckIfNoteEdited(false);\n    setDisplayNote(false);\n  };\n\n  console.log(DisplayNote);\n\n  function expandContainer() {\n    setDisplayNote(true);\n  }\n\n  function collapseContainer(e) {\n    console.log(!bodyInputRef.current.focus());\n\n    if (!editorStateTitle.getCurrentContent().hasText() && !editorState.getCurrentContent().hasText()) {\n      setDisplayNote(false);\n      console.log('collapse');\n    }\n  } //   const onChange = (newState) => {\n  //     const currentContentState = editorState.getCurrentContent()\n  //     const newContentState = newState.getCurrentContent()\n  //     setEditorState(newState)\n  //     if (currentContentState !== newContentState) {\n  //       setCheckIfNoteEdited(true)\n  //       console.log('chaning')\n  //     } else {\n  //       console.log('not changing')\n  //     }\n  //   }\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"addNote-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addNote-container\",\n      onClick: expandContainer,\n      onBlur: e => {\n        collapseContainer(e);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addNote-Title\" // style={{ display: DisplayNote ? 'block' : 'none' }}\n        // style={{display:editorState.getCurrentContent().hasText()? 'block' : 'none' }}\n        ,\n        children: /*#__PURE__*/_jsxDEV(EditorComp, {\n          editorState: editorStateTitle,\n          setEditorState: setEditorStateTitle,\n          placeholderText: \"Title\",\n          setCheckIfNoteEdited: setCheckIfNoteEdited,\n          showToolbar: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addNote-Body\" // onClick={expandContainer}\n        // onBlur={collapseContainer}\n        ,\n        style: {\n          display: DisplayNote ? 'block' : 'none'\n        },\n        ref: bodyInputRef,\n        children: /*#__PURE__*/_jsxDEV(EditorComp, {\n          editorState: editorState,\n          setEditorState: setEditorState,\n          placeholderText: \"Start typing...\",\n          setCheckIfNoteEdited: setCheckIfNoteEdited,\n          showToolbar: true,\n          submitNote: submitNote,\n          clearNote: clearNote,\n          DisplayNote: DisplayNote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddNote, \"KemoHEwMk0yKL6QvCpE7X6hNZwg=\");\n\n_c = AddNote;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNote\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Components/Dashboard/AddNote.js"],"names":["React","useRef","useState","convertToRaw","EditorState","axios","EditorComp","AddNote","setCheckIfNewNoteAdded","editorState","setEditorState","createEmpty","editorStateTitle","setEditorStateTitle","checkIfNoteEdited","setCheckIfNoteEdited","DisplayNote","setDisplayNote","bodyInputRef","submitNote","getCurrentContent","hasText","post","body","JSON","stringify","console","log","clearNote","expandContainer","collapseContainer","e","current","focus","display"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react'\r\nimport { convertToRaw, EditorState } from 'draft-js'\r\nimport axios from 'axios'\r\nimport './Dashboard.css'\r\nimport EditorComp from '../../Hooks/DraftEditor'\r\n\r\nexport default function AddNote({ setCheckIfNewNoteAdded }) {\r\n  const [editorState, setEditorState] = useState(() =>\r\n    EditorState.createEmpty()\r\n  )\r\n  const [editorStateTitle, setEditorStateTitle] = useState(() =>\r\n    EditorState.createEmpty()\r\n  )\r\n\r\n  const [checkIfNoteEdited, setCheckIfNoteEdited] = useState(false)\r\n  const [DisplayNote, setDisplayNote] = useState(false)\r\n  const bodyInputRef = useRef(null)\r\n  //   const handleKeyCommand = (command, editorState) => {\r\n  //     const newState = RichUtils.handleKeyCommand(editorState, command)\r\n  //     if (newState) {\r\n  //       setEditorState(newState)\r\n  //       setCheckIfNoteEdited(true)\r\n  //       return 'handled'\r\n  //     }\r\n  //     return 'not handled'\r\n  //   }\r\n  const submitNote = async () => {\r\n    if (\r\n      checkIfNoteEdited &&\r\n      (editorStateTitle.getCurrentContent().hasText() ||\r\n        editorState.getCurrentContent().hasText())\r\n    ) {\r\n      await axios.post('/api/dashboard/notes', {\r\n        body: JSON.stringify(convertToRaw(editorState.getCurrentContent())),\r\n      })\r\n      setEditorState(EditorState.createEmpty())\r\n      setEditorStateTitle(EditorState.createEmpty())\r\n\r\n      setCheckIfNewNoteAdded(true)\r\n      setCheckIfNoteEdited(false)\r\n    } else console.log('eeee')\r\n  }\r\n  const clearNote = () => {\r\n    setEditorState(EditorState.createEmpty())\r\n    setEditorStateTitle(EditorState.createEmpty())\r\n    setCheckIfNoteEdited(false)\r\n    setDisplayNote(false)\r\n  }\r\n  console.log(DisplayNote)\r\n  function expandContainer() {\r\n    setDisplayNote(true)\r\n  }\r\n  function collapseContainer(e) {\r\n    console.log(!bodyInputRef.current.focus());\r\n    if (\r\n      !editorStateTitle.getCurrentContent().hasText() &&\r\n      !editorState.getCurrentContent().hasText()\r\n    ) {\r\n      setDisplayNote(false)\r\n      console.log('collapse')\r\n    }\r\n  }\r\n\r\n  //   const onChange = (newState) => {\r\n  //     const currentContentState = editorState.getCurrentContent()\r\n  //     const newContentState = newState.getCurrentContent()\r\n  //     setEditorState(newState)\r\n  //     if (currentContentState !== newContentState) {\r\n  //       setCheckIfNoteEdited(true)\r\n\r\n  //       console.log('chaning')\r\n  //     } else {\r\n  //       console.log('not changing')\r\n  //     }\r\n  //   }\r\n\r\n  return (\r\n    <section className='addNote-wrapper'>\r\n      <div className='addNote-container'\r\n      onClick={expandContainer}\r\n      onBlur={(e)=>{collapseContainer(e)}}\r\n      >\r\n        {/* <Editor\r\n          editorState={editorState}\r\n          value={editorState}\r\n          onChange={onChange}\r\n          placeholder='Start typing...'\r\n          //   onChange={setEditorState}\r\n          handleKeyCommand={handleKeyCommand}\r\n          className='addNote-editor'\r\n        /> */}\r\n        <div\r\n          className='addNote-Title'\r\n          // style={{ display: DisplayNote ? 'block' : 'none' }}\r\n\r\n          // style={{display:editorState.getCurrentContent().hasText()? 'block' : 'none' }}\r\n        >\r\n          <EditorComp\r\n            editorState={editorStateTitle}\r\n            setEditorState={setEditorStateTitle}\r\n            placeholderText='Title'\r\n            setCheckIfNoteEdited={setCheckIfNoteEdited}\r\n            showToolbar={false}\r\n          />\r\n        </div>\r\n        <div\r\n          className='addNote-Body'\r\n          // onClick={expandContainer}\r\n          // onBlur={collapseContainer}\r\n          style={{ display: DisplayNote ? 'block' : 'none' }}\r\n          ref={bodyInputRef}\r\n        >\r\n          <EditorComp\r\n            editorState={editorState}\r\n            setEditorState={setEditorState}\r\n            placeholderText='Start typing...'\r\n            setCheckIfNoteEdited={setCheckIfNoteEdited}\r\n            showToolbar={true}\r\n            submitNote={submitNote}\r\n            clearNote={clearNote}\r\n            DisplayNote={DisplayNote}\r\n          />\r\n        </div>\r\n        {/* <Toolbar editorState={editorState} setEditorState={setEditorState} /> */}\r\n        {/* <button onClick={submitNote}> Save</button> */}\r\n        {/* <button onClick={clearNote}> Clear</button> */}\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}