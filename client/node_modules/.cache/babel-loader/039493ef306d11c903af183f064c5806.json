{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Hooks\\\\DraftEditor.js\";\nimport React, { useState } from 'react';\nimport { Editor, EditorState, convertToRaw, RichUtils } from 'draft-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditorComp = _ref => {\n  let {\n    editorState,\n    setEditorState,\n    placeholderText,\n    setCheckIfNoteEdited\n  } = _ref;\n\n  // const [editorState, setEditorState] = useState(() =>\n  //   EditorState.createEmpty()\n  // )\n  const handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      setEditorState(newState);\n      setCheckIfNoteEdited(true);\n      return 'handled';\n    }\n\n    return 'not handled';\n  };\n\n  const onChange = newState => {\n    const currentContentState = editorState.getCurrentContent();\n    const newContentState = newState.getCurrentContent();\n    setEditorState(newState);\n\n    if (currentContentState !== newContentState) {\n      setCheckIfNoteEdited(true);\n      console.log('chaning');\n    } else {\n      console.log('not changing');\n    }\n  }; // const initialState = value\n  //   ? EditorState.createWithContent(convertFromRaw(JSON.parse(value)))\n  //   : EditorState.createEmpty()\n  // const [editorState, setEditorState] = useState(initialState)\n\n\n  return /*#__PURE__*/_jsxDEV(Editor, {\n    editorState: editorState,\n    value: editorState,\n    onChange: onChange,\n    placeholderText: \"Start typing...\" //   onChange={setEditorState}\n    ,\n    handleKeyCommand: handleKeyCommand,\n    className: \"addNote-editor\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_c = EditorComp;\nexport default EditorComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorComp\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Hooks/DraftEditor.js"],"names":["React","useState","Editor","EditorState","convertToRaw","RichUtils","EditorComp","editorState","setEditorState","placeholderText","setCheckIfNoteEdited","handleKeyCommand","command","newState","onChange","currentContentState","getCurrentContent","newContentState","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,YAA9B,EAA4CC,SAA5C,QAA6D,UAA7D;;;AAEA,MAAMC,UAAU,GAAG,QAKb;AAAA,MALc;AAClBC,IAAAA,WADkB;AAElBC,IAAAA,cAFkB;AAGlBC,IAAAA,eAHkB;AAIlBC,IAAAA;AAJkB,GAKd;;AACJ;AACA;AACA;AACA,QAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAUL,WAAV,KAA0B;AACjD,UAAMM,QAAQ,GAAGR,SAAS,CAACM,gBAAV,CAA2BJ,WAA3B,EAAwCK,OAAxC,CAAjB;;AACA,QAAIC,QAAJ,EAAc;AACZL,MAAAA,cAAc,CAACK,QAAD,CAAd;AACAH,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACA,aAAO,SAAP;AACD;;AACD,WAAO,aAAP;AACD,GARD;;AASA,QAAMI,QAAQ,GAAID,QAAD,IAAc;AAC7B,UAAME,mBAAmB,GAAGR,WAAW,CAACS,iBAAZ,EAA5B;AACA,UAAMC,eAAe,GAAGJ,QAAQ,CAACG,iBAAT,EAAxB;AACAR,IAAAA,cAAc,CAACK,QAAD,CAAd;;AACA,QAAIE,mBAAmB,KAAKE,eAA5B,EAA6C;AAC3CP,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,KAHD,MAGO;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD;AACF,GAVD,CAbI,CAyBJ;AACA;AACA;AAEA;;;AAEA,sBACE,QAAC,MAAD;AACE,IAAA,WAAW,EAAEZ,WADf;AAEE,IAAA,KAAK,EAAEA,WAFT;AAGE,IAAA,QAAQ,EAAEO,QAHZ;AAIE,IAAA,eAAe,EAAC,iBAJlB,CAKE;AALF;AAME,IAAA,gBAAgB,EAAEH,gBANpB;AAOE,IAAA,SAAS,EAAC;AAPZ;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA/CD;;KAAML,U;AAiDN,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { Editor, EditorState, convertToRaw, RichUtils } from 'draft-js'\r\n\r\nconst EditorComp = ({\r\n  editorState,\r\n  setEditorState,\r\n  placeholderText,\r\n  setCheckIfNoteEdited,\r\n}) => {\r\n  // const [editorState, setEditorState] = useState(() =>\r\n  //   EditorState.createEmpty()\r\n  // )\r\n  const handleKeyCommand = (command, editorState) => {\r\n    const newState = RichUtils.handleKeyCommand(editorState, command)\r\n    if (newState) {\r\n      setEditorState(newState)\r\n      setCheckIfNoteEdited(true)\r\n      return 'handled'\r\n    }\r\n    return 'not handled'\r\n  }\r\n  const onChange = (newState) => {\r\n    const currentContentState = editorState.getCurrentContent()\r\n    const newContentState = newState.getCurrentContent()\r\n    setEditorState(newState)\r\n    if (currentContentState !== newContentState) {\r\n      setCheckIfNoteEdited(true)\r\n      console.log('chaning')\r\n    } else {\r\n      console.log('not changing')\r\n    }\r\n  }\r\n\r\n  // const initialState = value\r\n  //   ? EditorState.createWithContent(convertFromRaw(JSON.parse(value)))\r\n  //   : EditorState.createEmpty()\r\n\r\n  // const [editorState, setEditorState] = useState(initialState)\r\n\r\n  return (\r\n    <Editor\r\n      editorState={editorState}\r\n      value={editorState}\r\n      onChange={onChange}\r\n      placeholderText='Start typing...'\r\n      //   onChange={setEditorState}\r\n      handleKeyCommand={handleKeyCommand}\r\n      className='addNote-editor'\r\n    />\r\n  )\r\n}\r\n\r\nexport default EditorComp\r\n"]},"metadata":{},"sourceType":"module"}