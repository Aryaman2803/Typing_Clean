{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Components\\\\Dashboard\\\\Modal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Dialog } from '@reach/dialog';\nimport '@reach/dialog/styles.css';\nimport axios from 'axios';\nimport DialogContent from '@mui/material/DialogContent';\nimport { TextareaAutosize } from '@mui/material';\nimport userNotesContext from '../../Context/userNotesContext';\nimport ContentEditable from 'react-contenteditable';\nimport './Dashboard.css';\nimport { Editor, EditorState } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Modal = () => {\n  _s();\n\n  let navigate = useNavigate();\n  let {\n    id\n  } = useParams();\n  let buttonRef = useRef(null);\n  const {\n    setCheckIfNoteUpdated\n  } = useContext(userNotesContext);\n  const [CheckIfNoteIsEdited, setCheckIfNoteIsEdited] = useState(false);\n\n  const onDismiss = async () => {\n    if (CheckIfNoteIsEdited) {\n      await axios.put(`/api/dashboard/notes/${id}`, {\n        title: title,\n        body: body // title: Note.title,\n        // body: Note.body,\n\n      });\n      setCheckIfNoteUpdated(true);\n      setCheckIfNoteIsEdited(false);\n    }\n\n    navigate(-1);\n  }; // const [Note, setNote] = useState({\n  //   id: id,\n  //   title: EditorState.createEmpty(),\n  //   body: EditorState.createEmpty(),\n  // })\n\n\n  const [title, setTitle] = useState(() => EditorState.createEmpty());\n  const [body, setBody] = useState(() => EditorState.createEmpty());\n\n  const fetchNote = async id => {\n    try {\n      const response = await axios.get(`/api/dashboard/${id}`, {\n        withCredentials: true\n      });\n\n      if ((response === null || response === void 0 ? void 0 : response.status) === 200) {// setTitle(response?.data?.note?.title)\n        // setBody(response?.data?.note?.body)\n        // setNote({\n        //   title: response?.data?.note?.title,\n        //   body: response?.data?.note?.body,\n        // })\n      }\n    } catch (err) {\n      console.log('error from dashboard js file', err);\n      navigate('/login');\n    }\n  };\n\n  const onChange = e => {\n    // setNote((prevState) => ({\n    //   ...prevState,\n    //   [e.target.name]: e.target.value,\n    // }))\n    setCheckIfNoteIsEdited(true);\n  };\n\n  console.log(CheckIfNoteIsEdited);\n  useEffect(() => {\n    fetchNote(id);\n  }, []);\n  const [editorState, setEditorState] = React.useState // () => EditorState.createEmpty(),\n  ();\n  if (!id) return null;\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    \"aria-labelledby\": \"label\",\n    className: \"modal-wrapper\",\n    onDismiss: onDismiss,\n    initialFocusRef: buttonRef // style={{padding: '0px'}}\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-wrapper-inner sc1\",\n      children: [/*#__PURE__*/_jsxDEV(Editor, {\n        editorState: body,\n        onChange: () => setBody(body)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Modal, \"/ih6bG2CaC7IbjgEucmkc/5h1AM=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = Modal;\nexport default Modal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Components/Dashboard/Modal.js"],"names":["React","useContext","useEffect","useRef","useState","useNavigate","useParams","Dialog","axios","DialogContent","TextareaAutosize","userNotesContext","ContentEditable","Editor","EditorState","Modal","navigate","id","buttonRef","setCheckIfNoteUpdated","CheckIfNoteIsEdited","setCheckIfNoteIsEdited","onDismiss","put","title","body","setTitle","createEmpty","setBody","fetchNote","response","get","withCredentials","status","err","console","log","onChange","e","editorState","setEditorState"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { Dialog } from '@reach/dialog'\r\nimport '@reach/dialog/styles.css'\r\nimport axios from 'axios'\r\nimport DialogContent from '@mui/material/DialogContent'\r\nimport { TextareaAutosize } from '@mui/material'\r\nimport userNotesContext from '../../Context/userNotesContext'\r\nimport ContentEditable from 'react-contenteditable'\r\nimport './Dashboard.css'\r\nimport { Editor, EditorState } from 'draft-js'\r\nimport 'draft-js/dist/Draft.css'\r\nconst Modal = () => {\r\n  let navigate = useNavigate()\r\n  let { id } = useParams()\r\n  let buttonRef = useRef(null)\r\n  const { setCheckIfNoteUpdated } = useContext(userNotesContext)\r\n  const [CheckIfNoteIsEdited, setCheckIfNoteIsEdited] = useState(false)\r\n\r\n  const onDismiss = async () => {\r\n    if (CheckIfNoteIsEdited) {\r\n      await axios.put(`/api/dashboard/notes/${id}`, {\r\n        title:title,\r\n        body: body,\r\n        // title: Note.title,\r\n        // body: Note.body,\r\n      })\r\n      setCheckIfNoteUpdated(true)\r\n      setCheckIfNoteIsEdited(false)\r\n    }\r\n\r\n    navigate(-1)\r\n  }\r\n  // const [Note, setNote] = useState({\r\n  //   id: id,\r\n  //   title: EditorState.createEmpty(),\r\n  //   body: EditorState.createEmpty(),\r\n  // })\r\n  const [title, setTitle] = useState(() => EditorState.createEmpty())\r\n  const [body, setBody] = useState(() => EditorState.createEmpty())\r\n\r\n  const fetchNote = async (id) => {\r\n    try {\r\n      const response = await axios.get(`/api/dashboard/${id}`, {\r\n        withCredentials: true,\r\n      })\r\n      if (response?.status === 200) {\r\n        // setTitle(response?.data?.note?.title)\r\n        // setBody(response?.data?.note?.body)\r\n        // setNote({\r\n        //   title: response?.data?.note?.title,\r\n        //   body: response?.data?.note?.body,\r\n        // })\r\n      }\r\n    } catch (err) {\r\n      console.log('error from dashboard js file', err)\r\n      navigate('/login')\r\n    }\r\n  }\r\n  const onChange = (e) => {\r\n    // setNote((prevState) => ({\r\n    //   ...prevState,\r\n    //   [e.target.name]: e.target.value,\r\n    // }))\r\n    setCheckIfNoteIsEdited(true)\r\n  }\r\n  console.log(CheckIfNoteIsEdited)\r\n\r\n  useEffect(() => {\r\n    fetchNote(id)\r\n  }, [])\r\n\r\n  const [editorState, setEditorState] = React\r\n    .useState\r\n    // () => EditorState.createEmpty(),\r\n    ()\r\n\r\n  if (!id) return null\r\n  return (\r\n    <Dialog\r\n      aria-labelledby='label'\r\n      className='modal-wrapper'\r\n      onDismiss={onDismiss}\r\n      initialFocusRef={buttonRef}\r\n      // style={{padding: '0px'}}\r\n    >\r\n      <div className='modal-wrapper-inner sc1'>\r\n        {/* <ContentEditable\r\n          className='title-contenteditable'\r\n          html={Note.title}\r\n          onChange={(e) =>\r\n            onChange({ target: { name: 'title', value: e.target.value } })\r\n          }\r\n          name='title'\r\n          placeholder='Title'\r\n          // defaultValue={Note.title}\r\n        /> */}\r\n        <Editor editorState={body} onChange={()=>setBody(body)} />;\r\n        {/* <ContentEditable\r\n          className='body-contenteditable'\r\n          html={Note.body}\r\n          onChange={(e) =>\r\n            onChange({ target: { name: 'body', value: e.target.value } })\r\n          }\r\n          name='body'\r\n          placeholder='Type your note here'\r\n          // defaultValue={Note.title}\r\n        /> */}\r\n        {/* <TextareaAutosize\r\n          aria-label='Enter Title'\r\n          // minRows={3}\r\n          style={{\r\n            padding: '0.7rem',\r\n            fontSize: '1.5rem',\r\n            width: '100%',\r\n            boxSizing: 'border-box',\r\n          }}\r\n          name='title'\r\n          placeholder='Title'\r\n          onChange={onChange}\r\n          defaultValue={Note?.title}\r\n        /> */}\r\n        {/* <DialogContent dividers> */}\r\n        {/* <TextareaAutosize\r\n          aria-label='Enter Body'\r\n          placeholder='Body'\r\n          minRows={10}\r\n          name='body'\r\n          onChange={onChange}\r\n          className='body-contenteditable'\r\n          defaultValue={Note?.body}\r\n        /> */}\r\n        {/* </DialogContent> */}\r\n      </div>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n"]},"metadata":{},"sourceType":"module"}