{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Components\\\\Dashboard\\\\Modal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Dialog } from '@reach/dialog';\nimport '@reach/dialog/styles.css';\nimport axios from 'axios';\nimport DialogContent from '@mui/material/DialogContent';\nimport { TextareaAutosize } from '@mui/material';\nimport userNotesContext from '../../Context/userNotesContext';\nimport ContentEditable from 'react-contenteditable';\nimport sanitizeHtml from 'sanitize-html';\nimport './Dashboard.css';\nimport { convertFromRaw, Editor, EditorState } from 'draft-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = EditorState.createEmpty();\n\nconst Modal = () => {\n  _s();\n\n  let navigate = useNavigate();\n  let {\n    id\n  } = useParams();\n  let buttonRef = useRef(null);\n  const {\n    setCheckIfNoteUpdated\n  } = useContext(userNotesContext);\n  const [CheckIfNoteIsEdited, setCheckIfNoteIsEdited] = useState(false);\n\n  const onDismiss = async () => {\n    if (CheckIfNoteIsEdited) {\n      await axios.put(`/api/dashboard/notes/${id}`, {\n        title: Note.title,\n        body: Note.body\n      });\n      setCheckIfNoteUpdated(true);\n      setCheckIfNoteIsEdited(false);\n    }\n\n    navigate(-1);\n  };\n\n  const [Note, setNote] = useState({\n    id: id,\n    title: '',\n    body: EditorState.createWithContent(convertFromRaw(''))\n  });\n\n  const fetchNote = async id => {\n    try {\n      const response = await axios.get(`/api/dashboard/${id}`, {\n        withCredentials: true\n      });\n\n      if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n        var _response$data, _response$data$note;\n\n        setNote({\n          title: response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$note = _response$data.note) === null || _response$data$note === void 0 ? void 0 : _response$data$note.title // body: response?.data?.note?.body,\n\n        });\n      }\n    } catch (err) {\n      console.log('error from dashboard js file', err);\n      navigate('/login');\n    }\n  };\n\n  const onChange = e => {\n    setNote(prevState => ({ ...prevState,\n      [e.target.name]: e.target.value\n    }));\n    setCheckIfNoteIsEdited(true);\n  };\n\n  console.log(CheckIfNoteIsEdited);\n  useEffect(() => {\n    fetchNote(id);\n  }, []);\n  const defaultOptions = {\n    allowedTags: ['b', 'i', 'em', 'strong', 'a'],\n    allowedAttributes: {\n      a: ['href']\n    },\n    allowedIframeHostnames: ['www.youtube.com']\n  };\n  const [state, setState] = useState({\n    editorState: EditorState.createEmpty()\n  });\n\n  const onChangee = editorState => {\n    setState({\n      editorState\n    });\n  };\n\n  if (!id) return null;\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    \"aria-labelledby\": \"label\",\n    className: \"modal-wrapper\",\n    onDismiss: onDismiss,\n    initialFocusRef: buttonRef // style={{padding: '0px'}}\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-wrapper-inner sc1\",\n      children: [/*#__PURE__*/_jsxDEV(ContentEditable, {\n        className: \"title-contenteditable\",\n        html: Note.title,\n        onChange: e => onChange({\n          target: {\n            name: 'title',\n            value: e.target.value\n          }\n        }),\n        name: \"title\",\n        placeholder: \"Title\" // defaultValue={Note.title}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {\n        editorState: state.editorState,\n        onChange: onChangee // ref={e => ref.current = e}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this), \"/>\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Modal, \"SprGbKG+zBeYx5sYjEz13+S3Bxo=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = Modal;\nexport default Modal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Components/Dashboard/Modal.js"],"names":["React","useContext","useEffect","useRef","useState","useNavigate","useParams","Dialog","axios","DialogContent","TextareaAutosize","userNotesContext","ContentEditable","sanitizeHtml","convertFromRaw","Editor","EditorState","initialState","createEmpty","Modal","navigate","id","buttonRef","setCheckIfNoteUpdated","CheckIfNoteIsEdited","setCheckIfNoteIsEdited","onDismiss","put","title","Note","body","setNote","createWithContent","fetchNote","response","get","withCredentials","status","data","note","err","console","log","onChange","e","prevState","target","name","value","defaultOptions","allowedTags","allowedAttributes","a","allowedIframeHostnames","state","setState","editorState","onChangee"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { Dialog } from '@reach/dialog'\r\nimport '@reach/dialog/styles.css'\r\nimport axios from 'axios'\r\nimport DialogContent from '@mui/material/DialogContent'\r\nimport { TextareaAutosize } from '@mui/material'\r\nimport userNotesContext from '../../Context/userNotesContext'\r\nimport ContentEditable from 'react-contenteditable'\r\nimport sanitizeHtml from 'sanitize-html'\r\nimport './Dashboard.css'\r\nimport {convertFromRaw, Editor, EditorState} from 'draft-js'\r\n\r\nconst initialState= EditorState.createEmpty()\r\n\r\nconst Modal = () => {\r\n  let navigate = useNavigate()\r\n  let { id } = useParams()\r\n  let buttonRef = useRef(null)\r\n  const { setCheckIfNoteUpdated } = useContext(userNotesContext)\r\n  const [CheckIfNoteIsEdited, setCheckIfNoteIsEdited] = useState(false)\r\n\r\n  const onDismiss = async () => {\r\n    if (CheckIfNoteIsEdited) {\r\n      await axios.put(`/api/dashboard/notes/${id}`, {\r\n        title: Note.title,\r\n        body: Note.body,\r\n      })\r\n      setCheckIfNoteUpdated(true)\r\n      setCheckIfNoteIsEdited(false)\r\n    }\r\n\r\n    navigate(-1)\r\n  }\r\n  const [Note, setNote] = useState({\r\n    id: id,\r\n    title: '',\r\n    body: EditorState.createWithContent(convertFromRaw('')),\r\n  })\r\n\r\n  const fetchNote = async (id) => {\r\n    try {\r\n      const response = await axios.get(`/api/dashboard/${id}`, {\r\n        withCredentials: true,\r\n      })\r\n      if (response?.status === 200) {\r\n        setNote({\r\n          title: response?.data?.note?.title,\r\n          // body: response?.data?.note?.body,\r\n          \r\n        })\r\n      }\r\n    } catch (err) {\r\n      console.log('error from dashboard js file', err)\r\n      navigate('/login')\r\n    }\r\n  }\r\n  const onChange = (e) => {\r\n    setNote((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.value,\r\n    }))\r\n    setCheckIfNoteIsEdited(true)\r\n  }\r\n  console.log(CheckIfNoteIsEdited)\r\n\r\n  useEffect(() => {\r\n    fetchNote(id)\r\n  }, [])\r\n\r\n  const defaultOptions = {\r\n    allowedTags: ['b', 'i', 'em', 'strong', 'a'],\r\n    allowedAttributes: {\r\n      a: ['href'],\r\n    },\r\n    allowedIframeHostnames: ['www.youtube.com'],\r\n  }\r\n  const [state, setState] = useState({\r\n        editorState: EditorState.createEmpty(),\r\n  });\r\n\r\n  const onChangee= (editorState) => {\r\n        setState({\r\n              editorState,\r\n        });\r\n  };\r\n  if (!id) return null\r\n  return (\r\n    <Dialog\r\n      aria-labelledby='label'\r\n      className='modal-wrapper'\r\n      onDismiss={onDismiss}\r\n      initialFocusRef={buttonRef}\r\n      // style={{padding: '0px'}}\r\n    >\r\n      <div className='modal-wrapper-inner sc1'>\r\n        <ContentEditable\r\n          className='title-contenteditable'\r\n          html={Note.title}\r\n          onChange={(e) =>\r\n            onChange({ target: { name: 'title', value: e.target.value } })\r\n          }\r\n          name='title'\r\n          placeholder='Title'\r\n          // defaultValue={Note.title}\r\n        />\r\n      <Editor\r\n                        editorState={state.editorState}\r\n                        onChange={onChangee}\r\n                  // ref={e => ref.current = e}\r\n                  />\r\n        {/* <ContentEditable\r\n          className='body-contenteditable'\r\n          html={Note.body}\r\n          onChange={(e) =>\r\n            onChange({ target: { name: 'body', value: e.target.value } })\r\n          }\r\n          name='body'\r\n          placeholder='Type your note here'\r\n          // defaultValue={Note.title}\r\n        /> */}\r\n        {/* <TextareaAutosize\r\n          aria-label='Enter Title'\r\n          // minRows={3}\r\n          style={{\r\n            padding: '0.7rem',\r\n            fontSize: '1.5rem',\r\n            width: '100%',\r\n            boxSizing: 'border-box',\r\n          }}\r\n          name='title'\r\n          placeholder='Title'\r\n          onChange={onChange}\r\n          defaultValue={Note?.title}\r\n        /> */}\r\n        {/* <DialogContent dividers> */}\r\n        {/* <TextareaAutosize\r\n          aria-label='Enter Body'\r\n          placeholder='Body'\r\n          minRows={10}\r\n          name='body'\r\n          onChange={onChange}\r\n          className='body-contenteditable'\r\n          defaultValue={Note?.body} */}\r\n        />\r\n        {/* </DialogContent> */}\r\n      </div>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n"]},"metadata":{},"sourceType":"module"}