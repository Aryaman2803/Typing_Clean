{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Components\\\\Dashboard\\\\AddNote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { convertFromHTML, convertToRaw, Editor, EditorState, RichUtils } from 'draft-js';\nimport Toolbar from '../../Hooks/Toolbar';\nimport axios from 'axios';\nimport './Dashboard.css'; // import 'draft-js/dist/Draft.css'\n\nimport EditorComp from '../../Hooks/DraftEditor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddNote(_ref) {\n  _s();\n\n  let {\n    setCheckIfNewNoteAdded\n  } = _ref;\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n  const [checkIfNoteEdited, setCheckIfNoteEdited] = useState(false);\n\n  const handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      setEditorState(newState);\n      setCheckIfNoteEdited(true);\n      return 'handled';\n    }\n\n    return 'not handled';\n  };\n\n  const submitNote = async () => {\n    if (checkIfNoteEdited && editorState.getCurrentContent().hasText()) {\n      await axios.post('/api/dashboard/notes', {\n        body: JSON.stringify(convertToRaw(editorState.getCurrentContent()))\n      });\n      setEditorState(EditorState.createEmpty());\n      setCheckIfNewNoteAdded(true);\n      setCheckIfNoteEdited(false);\n    }\n  };\n\n  const clearNote = () => {\n    setEditorState(EditorState.createEmpty());\n    setCheckIfNoteEdited(false);\n  }; //   const onChange = (newState) => {\n  //     const currentContentState = editorState.getCurrentContent()\n  //     const newContentState = newState.getCurrentContent()\n  //     setEditorState(newState)\n  //     if (currentContentState !== newContentState) {\n  //       setCheckIfNoteEdited(true)\n  //       console.log('chaning')\n  //     } else {\n  //       console.log('not changing')\n  //     }\n  //   }\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"addNote-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addNote-container\",\n      children: [/*#__PURE__*/_jsxDEV(EditorComp, {\n        editorState: editorState,\n        setEditorState: setEditorState,\n        placeholderText: \"Start typing...\",\n        setCheckIfNoteEdited: setCheckIfNoteEdited\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n        editorState: editorState,\n        setEditorState: setEditorState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitNote,\n        children: \" Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearNote,\n        children: \" Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddNote, \"Pdj0mg2eM7jGDmfTp0a5YkLUVCk=\");\n\n_c = AddNote;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNote\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Components/Dashboard/AddNote.js"],"names":["React","useState","convertFromHTML","convertToRaw","Editor","EditorState","RichUtils","Toolbar","axios","EditorComp","AddNote","setCheckIfNewNoteAdded","editorState","setEditorState","createEmpty","checkIfNoteEdited","setCheckIfNoteEdited","handleKeyCommand","command","newState","submitNote","getCurrentContent","hasText","post","body","JSON","stringify","clearNote"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,eADF,EAEEC,YAFF,EAGEC,MAHF,EAIEC,WAJF,EAKEC,SALF,QAMO,UANP;AAOA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP,C,CACA;;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AACA,eAAe,SAASC,OAAT,OAA6C;AAAA;;AAAA,MAA5B;AAAEC,IAAAA;AAAF,GAA4B;AAC1D,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,MAC7CI,WAAW,CAACS,WAAZ,EAD4C,CAA9C;AAGA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4Cf,QAAQ,CAAC,KAAD,CAA1D;;AAEA,QAAMgB,gBAAgB,GAAG,CAACC,OAAD,EAAUN,WAAV,KAA0B;AACjD,UAAMO,QAAQ,GAAGb,SAAS,CAACW,gBAAV,CAA2BL,WAA3B,EAAwCM,OAAxC,CAAjB;;AACA,QAAIC,QAAJ,EAAc;AACZN,MAAAA,cAAc,CAACM,QAAD,CAAd;AACAH,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACA,aAAO,SAAP;AACD;;AACD,WAAO,aAAP;AACD,GARD;;AASA,QAAMI,UAAU,GAAG,YAAY;AAC7B,QAAIL,iBAAiB,IAAIH,WAAW,CAACS,iBAAZ,GAAgCC,OAAhC,EAAzB,EAAoE;AAClE,YAAMd,KAAK,CAACe,IAAN,CAAW,sBAAX,EAAmC;AACvCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAevB,YAAY,CAACS,WAAW,CAACS,iBAAZ,EAAD,CAA3B;AADiC,OAAnC,CAAN;AAGAR,MAAAA,cAAc,CAACR,WAAW,CAACS,WAAZ,EAAD,CAAd;AACAH,MAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACAK,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD;AACF,GATD;;AAUA,QAAMW,SAAS,GAAG,MAAM;AACtBd,IAAAA,cAAc,CAACR,WAAW,CAACS,WAAZ,EAAD,CAAd;AACAE,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,GAHD,CAzB0D,CA8B5D;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEE,sBACE;AAAS,IAAA,SAAS,EAAC,iBAAnB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BAUE,QAAC,UAAD;AACE,QAAA,WAAW,EAAEJ,WADf;AAEE,QAAA,cAAc,EAAEC,cAFlB;AAGE,QAAA,eAAe,EAAC,iBAHlB;AAIE,QAAA,oBAAoB,EAAEG;AAJxB;AAAA;AAAA;AAAA;AAAA,cAVF,eAgBE,QAAC,OAAD;AAAS,QAAA,WAAW,EAAEJ,WAAtB;AAAmC,QAAA,cAAc,EAAEC;AAAnD;AAAA;AAAA;AAAA;AAAA,cAhBF,eAiBE;AAAQ,QAAA,OAAO,EAAEO,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF,eAkBE;AAAQ,QAAA,OAAO,EAAEO,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GAnEuBjB,O;;KAAAA,O","sourcesContent":["import React, { useState } from 'react'\r\nimport {\r\n  convertFromHTML,\r\n  convertToRaw,\r\n  Editor,\r\n  EditorState,\r\n  RichUtils,\r\n} from 'draft-js'\r\nimport Toolbar from '../../Hooks/Toolbar'\r\nimport axios from 'axios'\r\nimport './Dashboard.css'\r\n// import 'draft-js/dist/Draft.css'\r\nimport EditorComp from '../../Hooks/DraftEditor'\r\nexport default function AddNote({ setCheckIfNewNoteAdded }) {\r\n  const [editorState, setEditorState] = useState(() =>\r\n    EditorState.createEmpty()\r\n  )\r\n  const [checkIfNoteEdited, setCheckIfNoteEdited] = useState(false)\r\n\r\n  const handleKeyCommand = (command, editorState) => {\r\n    const newState = RichUtils.handleKeyCommand(editorState, command)\r\n    if (newState) {\r\n      setEditorState(newState)\r\n      setCheckIfNoteEdited(true)\r\n      return 'handled'\r\n    }\r\n    return 'not handled'\r\n  }\r\n  const submitNote = async () => {\r\n    if (checkIfNoteEdited && editorState.getCurrentContent().hasText()) {\r\n      await axios.post('/api/dashboard/notes', {\r\n        body: JSON.stringify(convertToRaw(editorState.getCurrentContent())),\r\n      })\r\n      setEditorState(EditorState.createEmpty())\r\n      setCheckIfNewNoteAdded(true)\r\n      setCheckIfNoteEdited(false)\r\n    }\r\n  }\r\n  const clearNote = () => {\r\n    setEditorState(EditorState.createEmpty())\r\n    setCheckIfNoteEdited(false)\r\n  }\r\n\r\n//   const onChange = (newState) => {\r\n//     const currentContentState = editorState.getCurrentContent()\r\n//     const newContentState = newState.getCurrentContent()\r\n//     setEditorState(newState)\r\n//     if (currentContentState !== newContentState) {\r\n//       setCheckIfNoteEdited(true)\r\n\r\n//       console.log('chaning')\r\n//     } else {\r\n//       console.log('not changing')\r\n//     }\r\n//   }\r\n\r\n  return (\r\n    <section className='addNote-wrapper'>\r\n      <div className='addNote-container'>\r\n        {/* <Editor\r\n          editorState={editorState}\r\n          value={editorState}\r\n          onChange={onChange}\r\n          placeholder='Start typing...'\r\n          //   onChange={setEditorState}\r\n          handleKeyCommand={handleKeyCommand}\r\n          className='addNote-editor'\r\n        /> */}\r\n        <EditorComp\r\n          editorState={editorState}\r\n          setEditorState={setEditorState}\r\n          placeholderText='Start typing...'\r\n          setCheckIfNoteEdited={setCheckIfNoteEdited}\r\n        />\r\n        <Toolbar editorState={editorState} setEditorState={setEditorState} />\r\n        <button onClick={submitNote}> Save</button>\r\n        <button onClick={clearNote}> Clear</button>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}