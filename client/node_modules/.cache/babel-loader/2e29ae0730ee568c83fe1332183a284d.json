{"ast":null,"code":"var _jsxFileName = \"C:\\\\WEBDEV\\\\Typing\\\\client\\\\src\\\\Components\\\\Dashboard\\\\Modal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Dialog } from '@reach/dialog';\nimport '@reach/dialog/styles.css';\nimport axios from 'axios';\nimport userNotesContext from '../../Context/userNotesContext';\nimport './Dashboard.css';\nimport { convertFromRaw, convertToRaw, EditorState } from 'draft-js';\nimport ModalEditor from '../../Hooks/ModalEditor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Modal = () => {\n  _s();\n\n  let navigate = useNavigate();\n  let {\n    id\n  } = useParams();\n  let buttonRef = useRef(null);\n  const {\n    setCheckIfNoteUpdated\n  } = useContext(userNotesContext);\n  const [CheckIfNoteIsEdited, setCheckIfNoteIsEdited] = useState(false);\n  const [editorStateTitle, setEditorStateTitle] = useState(() => EditorState.createEmpty());\n  const [editorStateBody, setEditorStateBody] = useState(() => EditorState.createEmpty());\n\n  const onDismiss = async () => {\n    if (CheckIfNoteIsEdited) {\n      await axios.put(`/api/dashboard/notes/${id}`, {\n        title: JSON.stringify(convertToRaw(editorStateTitle.getCurrentContent())),\n        body: JSON.stringify(convertToRaw(editorStateBody.getCurrentContent()))\n      });\n      setCheckIfNoteUpdated(true);\n      setCheckIfNoteIsEdited(false);\n    }\n\n    navigate(-1);\n  }; // const [Note, setNote] = useState({\n  //   id: id,\n  //   title: '',\n  //   body: '',\n  // })\n\n\n  const fetchNote = async id => {\n    try {\n      const response = await axios.get(`/api/dashboard/${id}`, {\n        withCredentials: true\n      });\n\n      if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n        var _response$data, _response$data$note, _response$data2, _response$data2$note;\n\n        // setNote({\n        //   title: response?.data?.note?.title,\n        //   body: response?.data?.note?.body,\n        // })\n        setEditorStateTitle(EditorState.createWithContent(convertFromRaw(JSON.parse(response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$note = _response$data.note) === null || _response$data$note === void 0 ? void 0 : _response$data$note.title))));\n        setEditorStateBody(EditorState.createWithContent(convertFromRaw(JSON.parse(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$note = _response$data2.note) === null || _response$data2$note === void 0 ? void 0 : _response$data2$note.body))));\n      }\n    } catch (err) {\n      console.log('error from dashboard js file', err);\n      navigate('/login');\n    }\n  };\n\n  console.log(CheckIfNoteIsEdited);\n  useEffect(() => {\n    fetchNote(id);\n  }, []);\n  if (!id) return null;\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    \"aria-labelledby\": \"label\",\n    className: \"modal-wrapper\",\n    onDismiss: onDismiss,\n    initialFocusRef: buttonRef // style={{padding: '0px'}}\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-wrapper-inner sc1\",\n      children: [/*#__PURE__*/_jsxDEV(ModalEditor, {\n        editorState: editorStateTitle,\n        setEditorState: setEditorStateTitle,\n        showToolbar: false,\n        setCheckIfNoteIsEdited: setCheckIfNoteIsEdited\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalEditor, {\n        editorState: editorStateBody,\n        setEditorState: setEditorStateBody,\n        showToolbar: true,\n        setCheckIfNoteIsEdited: setCheckIfNoteIsEdited\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Modal, \"NdpOUnBZfzPb566iDFXn8+mGpgY=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = Modal;\nexport default Modal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["C:/WEBDEV/Typing/client/src/Components/Dashboard/Modal.js"],"names":["React","useContext","useEffect","useRef","useState","useNavigate","useParams","Dialog","axios","userNotesContext","convertFromRaw","convertToRaw","EditorState","ModalEditor","Modal","navigate","id","buttonRef","setCheckIfNoteUpdated","CheckIfNoteIsEdited","setCheckIfNoteIsEdited","editorStateTitle","setEditorStateTitle","createEmpty","editorStateBody","setEditorStateBody","onDismiss","put","title","JSON","stringify","getCurrentContent","body","fetchNote","response","get","withCredentials","status","createWithContent","parse","data","note","err","console","log"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { Dialog } from '@reach/dialog'\r\nimport '@reach/dialog/styles.css'\r\nimport axios from 'axios'\r\nimport userNotesContext from '../../Context/userNotesContext'\r\nimport './Dashboard.css'\r\nimport { convertFromRaw, convertToRaw, EditorState } from 'draft-js'\r\nimport ModalEditor from '../../Hooks/ModalEditor'\r\n\r\nconst Modal = () => {\r\n  let navigate = useNavigate()\r\n  let { id } = useParams()\r\n  let buttonRef = useRef(null)\r\n  const { setCheckIfNoteUpdated } = useContext(userNotesContext)\r\n\r\n  const [CheckIfNoteIsEdited, setCheckIfNoteIsEdited] = useState(false)\r\n  const [editorStateTitle, setEditorStateTitle] = useState(() =>\r\n    EditorState.createEmpty()\r\n  )\r\n  const [editorStateBody, setEditorStateBody] = useState(() =>\r\n    EditorState.createEmpty()\r\n  )\r\n\r\n  const onDismiss = async () => {\r\n    if (CheckIfNoteIsEdited) {\r\n      await axios.put(`/api/dashboard/notes/${id}`, {\r\n        title: JSON.stringify(\r\n          convertToRaw(editorStateTitle.getCurrentContent())\r\n        ),\r\n        body: JSON.stringify(convertToRaw(editorStateBody.getCurrentContent())),\r\n      })\r\n      setCheckIfNoteUpdated(true)\r\n      setCheckIfNoteIsEdited(false)\r\n    }\r\n    navigate(-1)\r\n  }\r\n  // const [Note, setNote] = useState({\r\n  //   id: id,\r\n  //   title: '',\r\n  //   body: '',\r\n  // })\r\n\r\n  const fetchNote = async (id) => {\r\n    try {\r\n      const response = await axios.get(`/api/dashboard/${id}`, {\r\n        withCredentials: true,\r\n      })\r\n      if (response?.status === 200) {\r\n        // setNote({\r\n        //   title: response?.data?.note?.title,\r\n        //   body: response?.data?.note?.body,\r\n        // })\r\n        setEditorStateTitle(\r\n          EditorState.createWithContent(\r\n            convertFromRaw(JSON.parse(response?.data?.note?.title))\r\n          )\r\n        )\r\n        setEditorStateBody(\r\n          EditorState.createWithContent(\r\n            convertFromRaw(JSON.parse(response?.data?.note?.body))\r\n          )\r\n        )\r\n      }\r\n    } catch (err) {\r\n      console.log('error from dashboard js file', err)\r\n      navigate('/login')\r\n    }\r\n  }\r\n\r\n  console.log(CheckIfNoteIsEdited)\r\n\r\n  useEffect(() => {\r\n    fetchNote(id)\r\n  }, [])\r\n\r\n  if (!id) return null\r\n  return (\r\n    <Dialog\r\n      aria-labelledby='label'\r\n      className='modal-wrapper'\r\n      onDismiss={onDismiss}\r\n      initialFocusRef={buttonRef}\r\n      // style={{padding: '0px'}}\r\n    >\r\n      <div className='modal-wrapper-inner sc1'>\r\n        <ModalEditor\r\n          editorState={editorStateTitle}\r\n          setEditorState={setEditorStateTitle}\r\n          showToolbar={false}\r\n          setCheckIfNoteIsEdited={setCheckIfNoteIsEdited}\r\n        />\r\n        <ModalEditor\r\n          editorState={editorStateBody}\r\n          setEditorState={setEditorStateBody}\r\n          showToolbar={true}\r\n          setCheckIfNoteIsEdited={setCheckIfNoteIsEdited}\r\n        />\r\n      </div>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n"]},"metadata":{},"sourceType":"module"}